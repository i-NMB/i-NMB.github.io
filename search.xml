<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>添加友链踩坑记录</title>
    <url>/Add-links.html</url>
    <content><![CDATA[<h2 id="新增links页面"><a href="#新增links页面" class="headerlink" title="新增links页面"></a>新增links页面</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new page links</span><br></pre></td></tr></table></figure>

<h2 id="配置menu"><a href="#配置menu" class="headerlink" title="配置menu"></a>配置menu</h2><p>主题配置文件<code>_config.yml</code>中<code>menu</code>下添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">links: /links/ || fa fa-link</span><br></pre></td></tr></table></figure>

<p><code>/themes/next/languages/zh-Hans.yml</code>文件中<code>menu</code>下增加中文描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">links: 友链</span><br></pre></td></tr></table></figure>

<p>做完这些工作，接下来就是要增加友链页面的样式了</p>
<h2 id="新增links-swig页"><a href="#新增links-swig页" class="headerlink" title="新增links.swig页"></a>新增<code>links.swig</code>页</h2><p>在<code>/themes/next/layout/</code>新建<code>links.swig</code>，内容如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;% block <span class="attribute">content</span> %&#125;</span><br><span class="line">  &#123;######################&#125;</span><br><span class="line">  &#123;### LINKS BLOCK ###&#125;</span><br><span class="line">  &#123;######################&#125;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="selector-tag">div</span> id=&quot;links&quot;&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line"></span><br><span class="line">            <span class="selector-id">#links</span>&#123;</span><br><span class="line">               <span class="attribute">margin-top</span>: <span class="number">5rem</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="selector-class">.links-content</span>&#123;</span><br><span class="line">                <span class="attribute">margin-top</span>:<span class="number">1rem</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="selector-class">.link-navigation</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">                <span class="attribute">content</span>: <span class="string">&quot; &quot;</span>;</span><br><span class="line">                <span class="attribute">display</span>: block;</span><br><span class="line">                <span class="attribute">clear</span>: both;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="selector-class">.card</span> &#123;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">                <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">                <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">                <span class="attribute">transition-duration</span>: <span class="number">0.15s</span>;</span><br><span class="line">                <span class="attribute">margin-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">                <span class="attribute">display</span>:flex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.card</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;</span><br><span class="line">                <span class="attribute">float</span>: left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.card</span><span class="selector-pseudo">:nth-child</span>(even) &#123;</span><br><span class="line">                <span class="attribute">float</span>: right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.card</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">                <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">6px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.12</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.04</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.card</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">                <span class="attribute">border</span>:none;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.card</span> <span class="selector-class">.ava</span> &#123;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">3rem</span><span class="meta">!important</span>;</span><br><span class="line">                <span class="attribute">height</span>: <span class="number">3rem</span><span class="meta">!important</span>;</span><br><span class="line">                <span class="attribute">margin</span>:<span class="number">0</span><span class="meta">!important</span>;</span><br><span class="line">                <span class="attribute">margin-right</span>: <span class="number">1em</span><span class="meta">!important</span>;</span><br><span class="line">                <span class="attribute">border-radius</span>:<span class="number">4px</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.card</span> <span class="selector-class">.card-header</span> &#123;</span><br><span class="line">                <span class="attribute">font-style</span>: italic;</span><br><span class="line">                <span class="attribute">overflow</span>: hidden;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">236px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.card</span> <span class="selector-class">.card-header</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">                <span class="attribute">font-style</span>: normal;</span><br><span class="line">                <span class="attribute">color</span>: <span class="number">#2bbc8a</span>;</span><br><span class="line">                <span class="attribute">font-weight</span>: bold;</span><br><span class="line">                <span class="attribute">text-decoration</span>: none;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.card</span> <span class="selector-class">.card-header</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">                <span class="attribute">color</span>: <span class="number">#d480aa</span>;</span><br><span class="line">                <span class="attribute">text-decoration</span>: none;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-class">.card</span> <span class="selector-class">.card-header</span> <span class="selector-class">.info</span> &#123;</span><br><span class="line">                <span class="attribute">font-style</span>:normal;</span><br><span class="line">                <span class="attribute">color</span>:<span class="number">#a3a3a3</span>;</span><br><span class="line">                <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">                <span class="attribute">min-width</span>: <span class="number">0</span>;</span><br><span class="line">                <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">                <span class="attribute">overflow</span>: hidden;</span><br><span class="line">                <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;links-<span class="attribute">content</span>&quot;&gt;</span><br><span class="line">            &lt;<span class="selector-tag">div</span> class=&quot;link-navigation&quot;&gt;</span><br><span class="line"></span><br><span class="line">                &#123;% for link in theme<span class="selector-class">.friendlinks</span> %&#125;</span><br><span class="line"></span><br><span class="line">                    &lt;<span class="selector-tag">div</span> class=&quot;card&quot;&gt;</span><br><span class="line">                        &lt;<span class="selector-tag">img</span> class=&quot;ava&quot; <span class="attribute">src</span>=&quot;&#123;&#123; link<span class="selector-class">.avatar</span> &#125;&#125;&quot;/&gt;</span><br><span class="line">                        &lt;<span class="selector-tag">div</span> class=&quot;card-<span class="selector-tag">header</span>&quot;&gt;</span><br><span class="line">                        &lt;<span class="selector-tag">div</span>&gt;&lt;<span class="selector-tag">a</span> href=&quot;&#123;&#123; link<span class="selector-class">.site</span> &#125;&#125;&quot; target=&quot;_blank&quot;&gt;@ &#123;&#123; link<span class="selector-class">.nickname</span> &#125;&#125;&lt;/<span class="selector-tag">a</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">                        &lt;<span class="selector-tag">div</span> class=&quot;info&quot;&gt;&#123;&#123; link<span class="selector-class">.info</span> &#125;&#125;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">                        &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">                    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">            &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">            &#123;&#123; page<span class="selector-class">.content</span> &#125;&#125;</span><br><span class="line">            &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line">  &#123;##########################&#125;</span><br><span class="line">  &#123;### END LINKS BLOCK ###&#125;</span><br><span class="line">  &#123;##########################&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改page-swig"><a href="#修改page-swig" class="headerlink" title="修改page.swig"></a>修改page.swig</h2><p>修改<code>/themes/next/layout/page.swig</code>文件，在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- elif page.type === &#x27;schedule&#x27; and not page.title %&#125;</span><br><span class="line">    &#123;&#123;- __(&#x27;title.schedule&#x27;) + page_title_suffix &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>下面添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- elif page.type === &#x27;links&#x27; and not page.title %&#125;</span><br><span class="line">  &#123;&#123;- __(&#x27;title.links&#x27;) + page_title_suffix &#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="引入links-swig"><a href="#引入links-swig" class="headerlink" title="引入links.swig"></a>引入links.swig</h2><p>关键在于所有的教程中给了引入代码，但没有说具体在哪里插入</p>
<p>在<code>/themes/next/layout/page.swig</code>中的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;% elif page.type === <span class="string">&#x27;schedule&#x27;</span> %&#125;</span><br><span class="line">  &lt;div <span class="keyword">class</span>=<span class="string">&quot;event-list&quot;</span>&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &#123;% include <span class="string">&#x27;_scripts/pages/schedule.swig&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure>

<p>插入</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;% elif page.type === <span class="string">&#x27;links&#x27;</span> %&#125;</span><br><span class="line">  &#123;% include <span class="string">&#x27;links.swig&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure>

<p>得到</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;% elif page.type === <span class="string">&#x27;schedule&#x27;</span> %&#125;</span><br><span class="line">  &lt;div <span class="keyword">class</span>=<span class="string">&quot;event-list&quot;</span>&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% elif page.type === <span class="string">&#x27;links&#x27;</span> %&#125;</span><br><span class="line">  &#123;% include <span class="string">&#x27;links.swig&#x27;</span> %&#125;</span><br><span class="line">  &#123;% include <span class="string">&#x27;_scripts/pages/schedule.swig&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="主题配置添加"><a href="#主题配置添加" class="headerlink" title="主题配置添加"></a>主题配置添加</h2><p>在主题配置文件<code>_config.yml</code>末尾处添加友链：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mylinks:</span><br><span class="line">  - nickname:  #友链名称</span><br><span class="line">    avatar:   #友链头像</span><br><span class="line">    site:   #友链地址</span><br><span class="line">    info:   #友链说明</span><br><span class="line">  - nickname:  #友链名称</span><br><span class="line">    avatar:   #友链头像</span><br><span class="line">    site:   #友链地址</span><br><span class="line">    info:   #友链说明</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Java对象和类—JAVA语言基础</title>
    <url>/Class-and-object.html</url>
    <content><![CDATA[<ul>
<li><strong>对象</strong>：对象是类的一个实例（<strong>对象不是找个女朋友</strong>），有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li>
<li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</li>
</ul>
<img data-src="https://img1.i-nmb.cn/img/object-class.jpg" alt="object-class" style="zoom:80%;" />



<p>下面我们大致具体了解一下在Java中类和面向对象</p>
<h2 id="面向对象概述"><a href="#面向对象概述" class="headerlink" title="面向对象概述"></a>面向对象概述</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象是事物存在的实体，如人、书桌、计算机、高楼大厦等。</p>
<p>人类解决问题的方式总是将复杂的事物简单化，于是就会思考这些对象都是由哪些部分组成的。通常都会将对象划分为两个部分，即<strong>静态部分</strong>与<strong>动态部分</strong>。</p>
<blockquote>
<p>静态部分：被称为“属性”。属性包括高矮、胖瘦、性别、年龄等</p>
<p>动态部分：个人具备的行为（动态部分）。哭泣、微笑、说话、行走</p>
</blockquote>
<p>例如，现在面临一只大雁要从北方飞往南方这样一个实际问题</p>
<p>1.识别这个对象的属性。对象具备的属性都是静态属性， 如大雁有一对翅膀、黑色的羽毛等</p>
<p>2.接着识别这个对象的<u>动态行为</u>，即这只大雁可以进行的动作，如飞行、觅食等，这些行为都是这个对象基于其属性而<u>具有的动作</u>。</p>
<p>3.识别出这个对象的属性和行为后，这个对象就被定义完成了。</p>
<p>所有的大雁都具有以上的属性和行为，可以将这些属性和行为封装起来，以描述大雁这类动物。</p>
<p><strong>类实质上就是封装对象属性和行为的载体，而对象则是类抽象出来的一个实例</strong></p>
<img data-src="https://img1.i-nmb.cn/img/%E5%A4%A7%E9%9B%81%EF%BC%88%E7%B1%BB%EF%BC%89.png" alt="大雁(类)" style="zoom:50%;" />



<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p><strong>类就是同一类事物的统称</strong>，如鸟类、家禽类、人类等</p>
<p><strong>类是构造对象时所依赖的规范</strong>，如一只鸟有一对翅膀，它可以用这对翅膀飞行，而基本上所有的鸟都具有有翅膀这个特性和飞行的技能，这样具有相同特性和行为的一类事物就称为类。</p>
<p>类的思想就是这样产生的</p>
<p>类是封装对象的属性和行为的载体，反过来说，<u>具有相同属性和行为的一类实体被称为类</u>。</p>
<p>类中对象的行为是以方法的形式定义的，对象的属性是以成员变量的形式定义的，所以类包括对象的属性和方法。</p>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>面向对象程序设计具有以下特点：</p>
<ul>
<li><p><input checked="" disabled="" type="checkbox"> 
封装性</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
继承性</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
多态性</p>
</li>
</ul>
<p>封装是面向对象编程的核心思想。将对象的属性和行为封装起来， 其载体就是类</p>
<p>采用封装的思想保证了类内部数据结构的完整性，应用该类的用户不能轻易地直接操作此数据结构，只能执行类允许公开的数据。这样就避免了外部操作对内部数据的影响，提高了程序的可维护性。</p>
  <img data-src="https://img1.i-nmb.cn/img/wps1.png" alt="类" style="zoom:125%;" />

<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>类与类之间同样具有关系，这种关系被称为关联。</p>
<p>例如，一个百货公司类与销售员类就是一个关联，学生类与教师类也是一个关联。两个类之间的关系有很多种，继承是关联中的一种。</p>
<p>当处理一个问题时，可以将一些有用的类保留下来，在遇到同样问题时拿来复用。</p>
<blockquote>
<p>由于鸽子属于鸟类，具有与鸟类相同的属性和行为，便可以在创建信鸽类时将鸟类拿来复用</p>
<p>此外还需要再添加一些信鸽具有的独特属性及行为</p>
</blockquote>
<p>鸽子类保留了鸟类的属性和行为，这样就节省了定义鸟和鸽子共同具有的属性和行为的时间，这就是继承的基本思想</p>
<p>继承性主要利用特定对象之间的共有属性</p>
<p>这里可以将平行四边形类看作是从四边形类中继承的。在Java语言中将类似于平行四边形的类称为子类，将类似于四边形的类称为父类或超类。</p>
<p><img data-src="https://img1.i-nmb.cn/img/image-20220509214849547.png" alt="image-20220509214849547"></p>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p><strong>将父类对象应用于子类的特征就是多态</strong></p>
<p>如果将子类的对象统一看作是父类的实例对象，这样当绘制图形时，简单地调用父类也就是图形类绘制图形的方法即可绘制任何图形，这就是多态最基本的思想。</p>
<p>其优点是：由于整个事件的处理都只依赖于父类的方法， 所以日后只要维护和调整父类的方法即可，这样就降低了维护的难度， 节省了时间。</p>
<p>多态的实现并不依赖于具体类，而是<u>依赖于抽象类和接口</u></p>
<p>图形类作为所有图形的父类，具有绘制图形的能力，这个方法可以称为“绘制图形”，但如果要执行这个“绘制图形”的命令，没有人知道应该画什么样的图形，并且如果要在图形类中抽象出一个图形对象，没有人能说清这个图形究竟是什么图形，<strong>所以使用“抽象”这个词来描述图形类比较恰当</strong>。在Java语言中称这样的类为抽象类，抽象类不能实例化对象。在多态的机制中，父类通常会被定义为抽象类，<strong>在抽象类中给出一个方法的标准</strong>，而不给出实现的具体流程。实质上这个方法也是抽象的，如图形类中的“绘制图形”方法<u>只提供一个可以绘制图形的<strong>标准</strong></u>，并没有提供具体绘制图形的流程，因为没有人知道究竟需要绘制什么形状的图形。</p>
<p><u>也就是说，<strong>父类只给出绘制图形的方法，但是不给出如何准确的画一个准确的三角形或四边形等特定图形</strong></u></p>
<p>比抽象类更方便的方式是将抽象类定义为接口。由抽象方法组成的集合就是接口。</p>
<p>可能螺丝帽和螺丝钉的厂家不同，但这两个物品可以轻易地组合在一起，这是因为生产螺丝帽和螺丝钉的厂家都遵循着一个标准，这个标准在Java中就是接口。</p>
<h2 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h2><p>类是封装对象的属性和行为的载体</p>
<h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p>在Java中对象的属性也称为成员变量。</p>
<p>首先定义一个图书类，成员变量对应于类对象的属性，在Book类中设置3个成员变量，分别为id、name和category，分别对应于图书编号、图书名称和图书类别3个图书属性。</p>
<img data-src="https://img1.i-nmb.cn/img/image-20220509220018538.png" alt="在项目中创建Book类，在该类中定义并使用成员变量" style="zoom:120%;" />

<p>根据以上代码，读者可以看到在Java中使用class关键字来定义类， Book是类的名称。同时在Book类中定义了3个成员变量，成员变量的类型可以设置为Java中合法的数据类型，其实成员变量就是普通的变量， 可以为它设置初始值，也可以不设置初始值。如果不设置初始值，则会有默认值。读者应该注意到在3个成员变量前面的private关键字，它用来定义一个私有成员（文章后面会介绍）</p>
<h3 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h3><p>在Java语言中使用成员方法对应于类对象的行为。以Book类为例， 它包含getName()和setName()两个方法，这两个成员方法分别为获取图书名称和设置图书名称的方法。</p>
<p>定义成员方法的语法格式如下：</p>
<p><img data-src="https://img1.i-nmb.cn/img/image-20220509220509233.png" alt="语法格式"></p>
<p>一个个成员方法可以有参数，这个参数可以是对象，也可以是基本数据类型的变量，同时成员方法有返回值和不返回任何值的选择，如果方法需要返回值，可以在方法体中使用return关键字，使用这个关键字后，方法的执行将被终止。</p>
<blockquote>
<p>Java中的成员方法无返回值，可以使用void关键字表示。</p>
</blockquote>
<h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><p><img data-src="https://img1.i-nmb.cn/img/image-20220509220608980.png" alt="Java语言中的修饰符权限"></p>
<blockquote>
<p>当声明类时不使用public、protected和private修饰符设置类的权限，则这个类预设为包存取范围，即只有一个包中的类可以调用这个类的成员变量或成员方法。</p>
</blockquote>
<p><img data-src="https://img1.i-nmb.cn/img/image-20220509221237131.png" alt="在项目中的com.lzw包下创建AnyClass类，该类使用默认的访问权限。"></p>
<p>由于类的修饰符为默认修饰符，即只有一个包内的其他类和子类可以对该类进行访问，而AnyClass类中的doString()方法却又被设置为public访问权限，即使这样，doString()方法的访问权限依然与AnyClass类的访问权限相同，因为Java语言规定，类的权限设定会约束类成员的权限设定</p>
<img data-src="https://img1.i-nmb.cn/img/image-20220509222330617.png" alt="image-20220509222330617" style="zoom:50%;" />

<p>本实例等同于</p>
<p><img data-src="https://img1.i-nmb.cn/img/image-20220509222445610.png" alt="本实例等同于"></p>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><img data-src="https://img1.i-nmb.cn/img/image-20220509220018538.png" alt="在项目中创建Book类，在该类中定义并使用成员变量" style="zoom:120%;" />

<p>定义的Book类中，getName()方法的<strong>id变量即为局部变量</strong>。实际上方法中的形参也可作为一个局部变量，如在定义setName(String name)方法时，String name这个形参就被看作是局部变量。</p>
<p>局部变量是在方法被执行时创建，在方法执行结束时被销毁。</p>
<p>使用时必须进行赋值操作或被初始化，否则会出现编译错误</p>
<p><img data-src="https://img1.i-nmb.cn/img/image-20220509222718106.png" alt="在项目中创建一个类文件，在该类中定义getName()方法并进行调用"></p>
<p>如果将id这个局部变量的初始值去掉，编译器将出现错误</p>
<h3 id="局部变量的有效范围"><a href="#局部变量的有效范围" class="headerlink" title="局部变量的有效范围"></a>局部变量的有效范围</h3><p>可以将局部变量的有效范围称为变量的作用域，局部变量的有效范围从该变量的声明开始到该变量的结束为止。</p>
<img data-src="https://img1.i-nmb.cn/img/image-20220509223033723.png" alt="描述了局部变量的作用范围" style="zoom:70%;" />

<p>在相互不嵌套的作用域中可以同时声明两个名称和类型相同的局部变量</p>
<img data-src="https://img1.i-nmb.cn/img/image-20220509223118827.png" alt="如图" style="zoom:70%;" />

<p>但是在相互嵌套的区域中不可以这样声明，如果将局部变量id在方法体的for循环中再次定义，编译器将会报错</p>
<img data-src="https://img1.i-nmb.cn/img/image-20220509223217979.png" alt="如图" style="zoom:70%;" />



<h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a><strong>this</strong>关键字</h3><p>在项目中创建一个类文件，该类中定义了setName()，并将方法的参数值赋予类中的成员变量</p>
<p><img data-src="https://img1.i-nmb.cn/img/image-20220509223327907.png" alt="类中定义了setName()"></p>
<p>在Java语言中规定使用this关键字来代表本类对象的引用嘛，this.name指的就是Book类中的name成员变量，而this.name&#x3D;name语句中的第二个name则指的是形参name。</p>
<p>this可以调用成员变量和成员方法，但Java语言中最常规的调用方式是使用“对象.成员变量”或“对象.成员方法”进行调用</p>
<p>事实上，this引用的就是本类的一个对象。在局部变量或方法参数覆盖了成员变量时，如上面代码的情况，就要添加this关键字明确引用的是类成员还是局部变量或方法参数。</p>
<p>如果省略this关键字直接写成name &#x3D; name，那只是把参数name赋值给参数变量本身而已，成员变量name的值没有改变，因为参数name在方法的作用域中覆盖了成员变量name。</p>
<p>this除了可以调用成员变量或成员方法之外，还可以作为方法的返回值。</p>
<p><img data-src="https://img1.i-nmb.cn/img/image-20220509223737656.png" alt="在项目中创建一个类文件，在该类中定义Book类型的方法，并通过this关键字进行返回"></p>
]]></content>
      <tags>
        <tag>Eclipse</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse的安装</title>
    <url>/Eclipse%E7%9A%84%E6%9E%84%E5%BB%BA.html</url>
    <content><![CDATA[<p>​		学习Java语言前，首先来介绍一款功能强大、使用简单、能够辅助程序设计的IDE（集成开发工具）。Eclipse是目前最流行的Java语言开发工具之一，它具有强大的代码辅助功能，可以帮助程序开发人员自动完成语法修正、补全文字、代码修正、API提示等编码工作，从而节省大量的时间和精力。</p>
<h2 id="下载Eclipse安装包"><a href="#下载Eclipse安装包" class="headerlink" title="下载Eclipse安装包"></a>下载Eclipse安装包</h2><p>​		打开官网：<a href="http://www.eclipse.org/downloads/%EF%BC%8C%E7%82%B9%E5%87%BBDownload">http://www.eclipse.org/downloads/，点击Download</a> Packages超链接</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/10/84b1f723e024c1c7.png" style="zoom:50%;" />



<p>点击<a href="https://www.eclipse.org/downloads/packages/release/2022-03/r/eclipse-ide-java-developers">Eclipse IDE for Java Developers</a>进入Eclipse IDE for Java Developers下载页面</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/10/66f4ae680b05dfa2.png" style="zoom:50%;" />



<p>为了与语言包的版本保持一致版本，我选择使用eclipse-java-2021-12-R版本。</p>
<p>​		在页面的右下角点击<a href="https://www.eclipse.org/downloads/packages/release/2021-12/r">Eclipse 2021-12 (4.22)</a>打开历史版本下载页面</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/10/4ca63736e7dad557.png" style="zoom:33%;" />

<p>​		根据自己的系统下载对应平台的安装包</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/10/6fea9a7ca9e9ac8a.png" style="zoom:55%;" />



<h2 id="下载Eclipse中文语言包"><a href="#下载Eclipse中文语言包" class="headerlink" title="下载Eclipse中文语言包"></a>下载Eclipse中文语言包</h2><p>​		<a href="https://download.eclipse.org/technology/babel/babel_language_packs/R0.19.2/2021-12/2021-12.php">点击进入语言包下载界面（2021-12-R）</a>找到Language: Chinese (Simplified)&gt;<a href="http://www.eclipse.org/downloads/download.php?file=/technology/babel/babel_language_packs/R0.19.2/2021-12/BabelLanguagePack-eclipse-zh_4.22.0.v20211218020001.zip">BabelLanguagePack-eclipse-zh_4.22.0.v20211218020001.zip (83.85%)</a>或者点击本文超链接下载</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/10/b3d1fc34519897e3.png" style="zoom:60%;" />

<img data-src="https://s3.bmp.ovh/imgs/2022/04/10/85f3976c41c744fe.png" alt="xz" style="zoom:50%;" />





<h2 id="Eclipse安装"><a href="#Eclipse安装" class="headerlink" title="Eclipse安装"></a>Eclipse安装</h2><p>​		从网站中下载的Eclipse安装文件是一个压缩包，将其解压缩到指定 的文件夹，将下载完成的汉化包解压缩，解压后生成的eclipse文件夹下 有两个子文件夹：features文件夹和plugins文件夹。将这两个子文件夹覆 盖到Eclipse程序的根目录下</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/10/7edd98802f70b668.png" style="zoom:50%;" />

<p>​		配置好Eclipse的多国语言包后，可以启动Eclipse了。在Eclipse的安 装文件夹中运行eclipse.exe文件，即开始启动Eclipse。在Eclipse的安 装文件夹中运行eclipse.exe文件，即开始启动Eclipse，将弹出“Eclipse启 动程序”对话框，该对话框用于设置Eclipse的工作空间（用于保存 Eclipse建立的程序项目和相关设置）。本书的开发环境统一设置工作空 间为Eclipse安装位置的workspace文件夹，在“Eclipse启动程序”对话框 的“工作空间”文本框中输入“.\eclipse-workspace”，单击“启动”按钮，即 可启动Eclipse</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/10/b98665e650d5d58c.png" style="zoom:50%;" />

<p>Eclipse首次启动时，会显示Eclipse欢迎界面，如图所示。单 击“欢迎”界面标题上的×，即可关闭该界面。</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/10/a62e77c05b0b6c2b.png" style="zoom:50%;" />



]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机等级考试计算机三级信息安全技术总汇</title>
    <url>/Information-Security-Technology.html</url>
    <content><![CDATA[<h2 id="考试大纲"><a href="#考试大纲" class="headerlink" title="考试大纲"></a>考试大纲</h2><h3 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h3><p>１． 了解信息安全保障工作的总体思路和基本实践方法 </p>
<p>２． 掌握信息安全技术的基本概念、原理、方法和技术 </p>
<p>３． 熟练掌握计算机网络安全、系统软件安全和应用软件安全的基本知识和实践技能 </p>
<p>４． 掌握信息安全设备的安装、配置和使用的基本方法 </p>
<p>５． 了解信息系统安全设施部署与管理基本技术 </p>
<p>６． 了解信息安全风险评估和等级保护原理与方法 </p>
<p>７． 了解信息安全相关的标准、法律法规和道德规范</p>
<h3 id="考试内容"><a href="#考试内容" class="headerlink" title="考试内容"></a>考试内容</h3><h4 id="一、信息安全保障概述"><a href="#一、信息安全保障概述" class="headerlink" title="一、信息安全保障概述"></a>一、信息安全保障概述</h4><p>快速链接：<a href="https://i-nmb.cn/Overview-of-information-security.html">https://i-nmb.cn/Overview-of-information-security.html</a></p>
<h5 id="１．-信息安全保障的内涵和意义"><a href="#１．-信息安全保障的内涵和意义" class="headerlink" title="１． 信息安全保障的内涵和意义"></a>１． 信息安全保障的内涵和意义</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--概念：人们对事物本质的认识,逻辑思维的最基本单元和形式.概念是反映事物本质属性的思维产物.内涵：一个概念所反映的事物的本质属性的总和,也就是概念的内容--&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="２．-信息安全保障的总体思路和基本实践方法"><a href="#２．-信息安全保障的总体思路和基本实践方法" class="headerlink" title="２． 信息安全保障的总体思路和基本实践方法"></a>２． 信息安全保障的总体思路和基本实践方法</h5><h4 id="二、信息安全基础技术与原理"><a href="#二、信息安全基础技术与原理" class="headerlink" title="二、信息安全基础技术与原理"></a>二、信息安全基础技术与原理</h4><h5 id="１．-密码技术"><a href="#１．-密码技术" class="headerlink" title="１． 密码技术"></a>１． 密码技术</h5><p>（１）对称密码与非对称密码 </p>
<p>（２）哈希函数 </p>
<p>（３）数字签名 </p>
<p>（４）密钥管理 </p>
<h5 id="２．-认证技术"><a href="#２．-认证技术" class="headerlink" title="２． 认证技术"></a>２． 认证技术</h5><p>（１）消息认证 </p>
<p>（２）身份认证 </p>
<h5 id="３．-访问控制技术"><a href="#３．-访问控制技术" class="headerlink" title="３． 访问控制技术"></a>３． 访问控制技术</h5><p>（１）访问控制模型 </p>
<p>（２）访问控制技术 </p>
<h5 id="４．-审计和监控技术"><a href="#４．-审计和监控技术" class="headerlink" title="４． 审计和监控技术"></a>４． 审计和监控技术</h5><p>（１）审计和监控基础 </p>
<p>（２）审计和监控技术 </p>
<h4 id="三、系统安全"><a href="#三、系统安全" class="headerlink" title="三、系统安全"></a>三、系统安全</h4><h5 id="１．-操作系统安全"><a href="#１．-操作系统安全" class="headerlink" title="１． 操作系统安全"></a>１． 操作系统安全</h5><p>（１）操作系统安全基础 </p>
<p>（２）操作系统安全实践 </p>
<h5 id="２．-数据库安全"><a href="#２．-数据库安全" class="headerlink" title="２． 数据库安全"></a>２． 数据库安全</h5><p>（１）数据库安全基础 </p>
<p>（２）数据库安全实践 </p>
<h4 id="四、网络安全"><a href="#四、网络安全" class="headerlink" title="四、网络安全"></a>四、网络安全</h4><h5 id="１．-网络安全基础"><a href="#１．-网络安全基础" class="headerlink" title="１． 网络安全基础"></a>１． 网络安全基础</h5><h5 id="２．-网络安全威胁技术"><a href="#２．-网络安全威胁技术" class="headerlink" title="２． 网络安全威胁技术"></a>２． 网络安全威胁技术</h5><h5 id="３．-网络安全防护技术"><a href="#３．-网络安全防护技术" class="headerlink" title="３． 网络安全防护技术"></a>３． 网络安全防护技术</h5><p>（１）防火墙 </p>
<p>（２）入侵检测系统与入侵防御系统 </p>
<p>（３）ＰＫＩ </p>
<p>（４）Ｖ什么N </p>
<p>（５）网络安全协议 </p>
<h4 id="五、应用安全"><a href="#五、应用安全" class="headerlink" title="五、应用安全"></a>五、应用安全</h4><h5 id="１．-软件漏洞概念与原理"><a href="#１．-软件漏洞概念与原理" class="headerlink" title="１． 软件漏洞概念与原理"></a>１． 软件漏洞概念与原理</h5><h5 id="２．-软件安全开发"><a href="#２．-软件安全开发" class="headerlink" title="２． 软件安全开发"></a>２． 软件安全开发</h5><h5 id="３．-软件安全检测"><a href="#３．-软件安全检测" class="headerlink" title="３． 软件安全检测"></a>３． 软件安全检测</h5><h5 id="４．-软件安全保护"><a href="#４．-软件安全保护" class="headerlink" title="４． 软件安全保护"></a>４． 软件安全保护</h5><h5 id="５．-恶意程序"><a href="#５．-恶意程序" class="headerlink" title="５． 恶意程序"></a>５． 恶意程序</h5><h5 id="６．-Web-应用系统安全"><a href="#６．-Web-应用系统安全" class="headerlink" title="６． Ｗｅｂ 应用系统安全"></a>６． Ｗｅｂ 应用系统安全</h5><h4 id="六、信息安全管理"><a href="#六、信息安全管理" class="headerlink" title="六、信息安全管理"></a>六、信息安全管理</h4><h5 id="１．-信息安全管理体系"><a href="#１．-信息安全管理体系" class="headerlink" title="１． 信息安全管理体系"></a>１． 信息安全管理体系</h5><h5 id="２．-信息安全风险评估"><a href="#２．-信息安全风险评估" class="headerlink" title="２． 信息安全风险评估"></a>２． 信息安全风险评估</h5><h5 id="３．-信息安全管理措施"><a href="#３．-信息安全管理措施" class="headerlink" title="３． 信息安全管理措施"></a>３． 信息安全管理措施</h5><h4 id="七、信息安全标准与法规"><a href="#七、信息安全标准与法规" class="headerlink" title="七、信息安全标准与法规"></a>七、信息安全标准与法规</h4><h5 id="１．-信息安全标准"><a href="#１．-信息安全标准" class="headerlink" title="１． 信息安全标准"></a>１． 信息安全标准</h5><h5 id="２．-信息安全法律法规与国家政策"><a href="#２．-信息安全法律法规与国家政策" class="headerlink" title="２． 信息安全法律法规与国家政策"></a>２． 信息安全法律法规与国家政策</h5><h5 id="３．-信息安全从业人员道德规范"><a href="#３．-信息安全从业人员道德规范" class="headerlink" title="３． 信息安全从业人员道德规范"></a>３． 信息安全从业人员道德规范</h5>]]></content>
      <tags>
        <tag>信息安全技术</tag>
        <tag>计算机三级</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA语言基础</title>
    <url>/JAVA-Foundation.html</url>
    <content><![CDATA[<p>通过阅读本篇，您可以：<br>　了解Java主类结构</p>
<p>　了解Java语言中的基本数据类型</p>
<p>　理解Java语言中的常量与变量</p>
<p>　掌握Java语言运算符的使用</p>
<p>　理解Java语言数据类型的转换</p>
<p>　了解Java语言中的代码注释与编码规范</p>
<h2 id="Java主类结构"><a href="#Java主类结构" class="headerlink" title="Java主类结构"></a>Java主类结构</h2><p>Java语言是面向对象的程序设计语言，Java程序的基本组成单元是类，类体中又包括属性与方法两部分。每一个应用程序都必须包含一个main()方法，含有main()方法的类称为主类。</p>
<p>在Eclipse下依次创建项目item、包Number和类Frist。创建完成后，即可得到以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Number;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Frist</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://img.i-nmb.cn/inmb/image-20220417144500802.png"></p>
<p>在类体中输入以下代码，实现在控制台上输出“你好Java”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Number;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Frist</span> &#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span><span class="string">&quot;你好&quot;</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line">		System.out.println(s1);</span><br><span class="line">		System.out.println(s2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<img data-src="https://img.i-nmb.cn/inmb/image-20220417150715988.png" alt="输出“你好Java”" style="zoom:200%;" />

<p>文件名必须和类名Frist同名，即Frist.java。还要注意大小写，Java 是区分大小写的。 </p>
<h3 id="包声明"><a href="#包声明" class="headerlink" title="包声明"></a>包声明</h3><p>一个Java应用程序是<strong>由若干个类组成</strong>的,上述例子的包声明就是“package Number; ”，因为package就是包声明</p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220417195929441.png" alt="image-20220417195929441" style="zoom:150%;" />





<h3 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h3><p>通常将类的<u>属性</u>称为类的<u>全局变量</u>（成员变量），将<strong>方法中</strong>的属性称为<strong>局部变量</strong>。</p>
<p>上例的s1为成员变量而s2属于局部变量，因为s1在类中声明并没有任何方法中，而s2在方法public static void main(String[] args)中</p>
<h3 id="编写主方法"><a href="#编写主方法" class="headerlink" title="编写主方法"></a>编写主方法</h3><p>main()方法是<strong>类体中的主方法</strong>。该方法从“{”开始，至“}”结束。</p>
<p>其中main()方法中的权限修饰符为public，静态修饰符为static、返回值修饰符为void。Java程序中的main()方法必须声明为public static void。</p>
<p>main()方法是程序开始执行的位置。</p>
<h3 id="导入API类库"><a href="#导入API类库" class="headerlink" title="导入API类库"></a>导入<strong>API</strong>类库</h3><p>在Java语言中可以通过import关键字<u>导入相关的类</u>。在JDK的API中（应用程序接口）提供了如java.awt、java.io等130多个包。</p>
<blockquote>
<p>可以通过 JDK的API文档来查看这些类，其中主要包括类的继承结构、类的应用、成员变量表、构造方法表等，并对每个变量的使用目的作了详细的描述，API文档是程序开发人员不可或缺的工具。 </p>
</blockquote>
<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>在Java中有8种基本数据类型来存储数值、字符和布尔值</p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220417211300924.png" alt="image-20220417211300924" style="zoom:50%;" />



<h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>整数类型用来存储整数数值，即没有小数部分的数值。可以是正数，也可以是负数。</p>
<h4 id="十进制："><a href="#十进制：" class="headerlink" title="十进制："></a>十进制：</h4><p>除了数字0，不能以0作为其他十进制数的开头</p>
<h4 id="八进制："><a href="#八进制：" class="headerlink" title="八进制："></a>八进制：</h4><p>八进制：如0123（转换成十进制数为83）、-0123（转换成十进制数为-83），<strong>八进制数必须以0开头。</strong> </p>
<h4 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h4><p>十六进制：如0x25（转换成十进制数为37）、0Xb01e（转换成十进制数为45086）。十六进制以 0X或者0x 开头</p>
<p>其中整数类型可分为byte、short、int和 long 4种类型，</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220417212043590.png" alt="image-20220417212043590"></p>
<h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p>浮点类型表示有小数部分的数字。Java语言中浮点类型分为单精度浮点类型（float）和双精度浮点类型（double）。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220417212255254.png" alt="image-20220417212255254"></p>
<p>在默认情况下，小数都被看作double型，<strong>若使用float型小数，则需要在小数后面添加F或f</strong></p>
<p>可以使用后缀d或D来明确表明这是一个double类型数据，不加d不会出错，但声明float型变量时如果不加f，系统会认为变量是double类型，从而出错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">13.23f</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">4562.12d</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="number">45678.1564</span>;</span><br></pre></td></tr></table></figure>



<h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><h4 id="char型"><a href="#char型" class="headerlink" title="char型"></a>char型</h4><p>字符类型（char）用于存储单个字符，占用16位（两个字节）内存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="comment">//char x = 97;</span></span><br></pre></td></tr></table></figure>

<p>同C和C++语言一样，Java语言也可以把字符作为整数对待。由于 unicode编码采用无符号编码，可以存储65536个字符(0x0000~0xffff）</p>
<h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><img data-src="https://img.i-nmb.cn/inmb/image-20220417213021108.png" alt="转义字符" style="zoom:70%;" />



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;				<span class="comment">//将转义字符叶’赋值给变量c1</span></span><br><span class="line"><span class="type">char</span> <span class="variable">char1</span> <span class="operator">=</span> <span class="string">&#x27;lu2605&#x27;</span>;		<span class="comment">//将转义字符lu2605’赋值给变量char1</span></span><br><span class="line">System.out.println(c1);		<span class="comment">//输出结果\</span></span><br><span class="line">System.out.println(char1);	<span class="comment">//输出结果★</span></span><br></pre></td></tr></table></figure>



<h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><p>布尔类型又称逻辑类型，通过关键字boolean来定义布尔类型变量， 只有true和false两个值别代表布尔逻辑中的“真”和“假”。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> b;			<span class="comment">//定义布尔型变量b</span></span><br><span class="line"><span class="type">boolean</span> b1,b2;		<span class="comment">//定义布尔型变量b1、b2</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">true</span>;	<span class="comment">//定义布尔型变量b，并赋给初值true</span></span><br></pre></td></tr></table></figure>



<h2 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h2><h3 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h3><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><p>标识符就好似一个名字来标识类名、变量名、方法名、数组名、文件名</p>
<p>Java语言规定<strong>标识符由任意顺序的字母、下画线（_）、美元符号（$）和数字组成</strong>，并且<strong>第一个字符不能是数字</strong>。标识符<u>不能是Java中的保留关键字</u>。</p>
<p>合法标识符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name</span><br><span class="line">user_age</span><br><span class="line">$page</span><br></pre></td></tr></table></figure>



<p>非法标识符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4word</span><br><span class="line">String</span><br><span class="line">User name</span><br></pre></td></tr></table></figure>



<blockquote>
<p>在Java语言中标识符中的字母是严格区分大小写的，如good和Good 是不同的两个标识符。</p>
<p>Java语言中的字母不仅包括通常的拉丁文字a、 b、c等，还包括汉字、日文以及其他许多语言中的文字。</p>
</blockquote>
<h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p>关键字是Java语言中已经被赋予特定意义的一些单词</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220418141622697.png" alt="关键字表"></p>
<h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p>定义变量就是要告诉编译器（compiler）这个变量的数据类型，这样，编译器就会分配对应的空间给它，并且让编译器知道他能存放的数据。</p>
<p>在程序运行过程中，<strong>空间内的值是变化的，这个内存空间就称为变量</strong>。为了便于操作，给这个空间取个名字，称为变量名。变量的命名必须是合法的标识符。</p>
<p>在声明变量时可以是没有赋值，也可以是直接赋给初值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a;		<span class="comment">//声明一个名称为a的 int 型变量</span></span><br><span class="line"><span class="type">char</span> b=<span class="string">&#x27;r&#x27;</span>	<span class="comment">//声明一个名称叫b的 char型变量并且将字母&#x27;r&#x27;赋值给b</span></span><br></pre></td></tr></table></figure>

<p>对于变量的命名并不是随意的，应遵循以下几条规则： </p>
<blockquote>
<p>变量名必须是一个有效的标识符。</p>
<p>变量名不可以使用Java中的关键字。</p>
<p>变量名不能重复。</p>
<p>应选择有意义的单词作为变量名。</p>
</blockquote>
<h3 id="声明常量"><a href="#声明常量" class="headerlink" title="声明常量"></a>声明常量</h3><p>在程序运行过程中一直不会改变的量称为常量（constant），常量在整个程序中<strong>只能被赋值一次。</strong></p>
<p>在Java语言中声明一个常量，除了要指定数据类型外，还需要通过 final关键字进行限定。声明常量的标准语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">final 数据类型    常量名称[=值]</span><br></pre></td></tr></table></figure>

<p>常量名通常使用大写字母，但这并不是必需的。<u>大写字母表示常量，是为了清楚地表明正在使用常量。</u></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">double</span> Pl=<span class="number">3.1415926D</span>;		<span class="comment">//声明double 型常量PI并赋值</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">BOOL</span> <span class="operator">=</span> <span class="literal">true</span>;		<span class="comment">//声明boolean型常量BOOL并赋值</span></span><br></pre></td></tr></table></figure>

<p>当常量属于“成员变量”时，必须在定义时就设定它的初值，否则将会产生编译错误。</p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220419000545207.png" alt="例如" style="zoom:67%;" />

<img data-src="https://img.i-nmb.cn/inmb/image-20220419000657144.png" alt="运行结果" style="zoom:50%;" />

<h3 id="变量的有效范围"><a href="#变量的有效范围" class="headerlink" title="变量的有效范围"></a>变量的有效范围</h3><p>在程序中，一般会根据变量的“有效范围”将变量分为“成员变量”和“局部变量”。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423213758825.png"></p>
<h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><p>在<u>类体中所定义的变量</u>被称为<u>成员变量</u>，成员变量在整个类中都有效。类的成员变量又可分为两种，即<u>静态变量</u>和<u>实例变量</u>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">var</span>&#123;</span><br><span class="line">	<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">45</span>; </span><br><span class="line">	<span class="keyword">static</span> <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">90</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中：x为实例变量，y为静态变量（也称类变量）</p>
<p>就是说，如果在成员变量的类型前面加上关键字static，这样的成员变量称为<strong>静态变量</strong>。静态变量的有效范围<strong>可以跨类</strong>，甚至可达到整个应用程序之内，还能直接以“类名.静态变量”的方式在其他类内使用。</p>
<h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>在类的方法体中定义的变量（方法内部定义，“{”与“}”之间的代码中声明的变量）称为局部变量。<u>局部变量只在当前代码块中有效</u>。在<u>类的方法</u>中声明的变量，包括方法的参数，都属于局部变量</p>
<p>局部变量只在当前定义的方法内有效，不能用于类的其他方法中。</p>
<p>局部变量可与成员变量的名字相同，此时成员变量将被隐藏，即这个（同名）成员变量在此方法中<strong>暂时失效</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Val</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">times</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;times的值为：&quot;</span>+times);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img data-src="https://img.i-nmb.cn/inmb/image-20220423213828334.png" alt="运行结果" style="zoom:150%;" />

<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Java中提供了丰富的运算符，如赋值运算符、算术运算符、比较运算符等。</p>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>赋值运算符以符号“&#x3D;”表示，它是一个二元运算符（对两个操作数作处理），其功能是将右方操作数所含的值赋给左方的操作数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<p>该表达式是将100赋值给变量a。左方的操作数必须是一个变量，而右边的操作数则可以是任何表达式，包括变量（如a、number）、常量（如123、’book’）、有效的表达式（如45*12）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;	<span class="comment">//声明int型变量a</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">5</span>;	<span class="comment">//声明int型变量b</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a+b;<span class="comment">//将变量a与b运算后的结果赋值给c</span></span><br></pre></td></tr></table></figure>

<p>遵循赋值运算符的运算规则，可知系统将先计算a+b的值，结果为15，然后将15赋值给变量c，因此c&#x3D;15。</p>
<p>由于赋值运算符“&#x3D;”处理时会先取得右方表达式处理后的结果，因此一个表达式中若含有两个以上的“&#x3D;”运算符，会从<strong>最右方的“&#x3D;”开始处理</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Eval</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        a = <span class="number">15</span>;</span><br><span class="line">        c = b = a + <span class="number">4</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;c的值为：&quot;</span> + c);</span><br><span class="line">        System.out.println(<span class="string">&quot;b的值为：&quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220423215102161.png" alt="image-20220423215102161" style="zoom:150%;" />

<blockquote>
<p>在Java中可以把赋值运算符连在一起使用。如：</p>
<p>x &#x3D; y &#x3D; z &#x3D; 5;</p>
<p>在这个语句中，变量x、y、z都得到同样的值5。但在实际开发中不建议使用这种赋值语句。</p>
</blockquote>
<h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>Java中的算术运算符主要有+（加）、-（减）、*（乘）、&#x2F;（除）、%（求余），它们都是二元运算符。Java中算术运算符的功能及使用方式如表</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423215326446.png" alt="Java算术运算符"></p>
<p>其中，“+”和“-”运算符还可以作为数据的正负符号，如+5、-7</p>
<p>在项目中创建类Arith，在主方法中定义变量，使用算术运算符将变量的计算结果输出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Arith</span> &#123;								<span class="comment">//创建类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;			<span class="comment">//主方法</span></span><br><span class="line">    <span class="type">float</span> <span class="variable">number1</span> <span class="operator">=</span> <span class="number">45.56f</span>;							<span class="comment">//声明float型变量并赋值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">number2</span> <span class="operator">=</span> <span class="number">152</span>;								<span class="comment">//声明int型变量并赋值</span></span><br><span class="line">    System.out.println(<span class="string">&quot;和为:&quot;</span>+( number1 + number2));	<span class="comment">//将变量相加之和输出</span></span><br><span class="line">    System.out.println(<span class="string">&quot;差为:&quot;</span>+(number2 - number1));	<span class="comment">//将变量相减之差输出</span></span><br><span class="line">    System.out.println(<span class="string">&quot;积为:&quot;</span>+number1 * number2);	<span class="comment">//将变量相乘的积输出</span></span><br><span class="line">    System.out.println(<span class="string">&quot;商为:&quot;</span>+number1 / number2);	<span class="comment">//将变量相除的商输出</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220423215938555.png" alt="运行结果" style="zoom:150%;" />

<h3 id="自增和自减运算符"><a href="#自增和自减运算符" class="headerlink" title="自增和自减运算符"></a>自增和自减运算符</h3><p>操作元必须是一个整型或浮点型变量。自增、自减运算符的作用是使变量的值增1或减1。</p>
<p>当运算符在前时，先进行运算，后操作。当运算符在后时，先操作，后进行运算。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423220207437.png" alt="自增或自减"></p>
<p>粗略地分析，++a与a++的作用都相当于a &#x3D; a+1。假设a &#x3D; 4，则：</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423220247132.png"></p>
<p>再看另一个语法，同样假设a &#x3D; 4，则：</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423220304753.png"></p>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>比较运算符属于二元运算符，用于程序中的变量之间、变量和自变量之间以及其他类型的信息之间的比较。比较运算符的运算结果是boolean型。当运算符对应的关系成立时，运算结果为true，否则为 false。所有比较运算符通常作为判断的依据用在条件语句中。比较运算符共有6个，如表</p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220423220957332.png" alt="比较运算符" style="zoom:150%;" />

<p>在项目中创建类Compare，在主方法中创建整型变量， 使用比较运算符对变量进行比较运算，并将运算后的结果输出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Compare</span> &#123;					<span class="comment">//创建类</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(Stringargs)</span>&#123;</span><br><span class="line">   	 <span class="type">int</span> <span class="variable">number1</span> <span class="operator">=</span> <span class="number">4</span>;					<span class="comment">//声明int型变量number1</span></span><br><span class="line">   	 <span class="type">int</span> <span class="variable">number2</span> <span class="operator">=</span> <span class="number">5</span>;					<span class="comment">//声明int型变量number2</span></span><br><span class="line"><span class="comment">/*依次将变量number1与变量number2的比较结果输出*/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;number1&gt;number的返回值为:&quot;</span>+(number1 &gt; number2));</span><br><span class="line">		System.out.println(<span class="string">&quot;number1&lt; number2返回值为:&quot;</span>+(number1 &lt; number2));</span><br><span class="line">		System.out.println(<span class="string">&quot;number1==number2返回值为:&quot;</span>+ (number1== number2));</span><br><span class="line">		System.out.println(<span class="string">&quot;number1!=number2返回值为:&quot;</span>+ (number1 != number2));</span><br><span class="line">		System.out.println(<span class="string">&quot;number1&gt;= number2返回值为:&quot;</span>+(number1 &gt;= number2));</span><br><span class="line">		System.out.println(<span class="string">&quot;number1&lt;=number2返回值为:&quot;</span>+(number1 &lt;= number2));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423222700166.png" alt="运行结果"></p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>返回类型为布尔值的表达式，如比较运算符，可以被组合在一起构成一个更复杂的表达式。这是通过逻辑运算符来实现的。</p>
<p>逻辑运算符表如下</p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220423222842853.png" alt="image-20220423222842853" style="zoom:100%;" />

<p>使用逻辑运算符进行逻辑运算表如下</p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220423222907829.png" alt="逻辑运算符进行逻辑运算表" style="zoom:100%;" />

<p>在项目中创建类Calculation，在主方法中创建整型变量，使用逻辑运算符对变量进行运算，并将运算结果输出。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423223016167.png" alt="image-20220423223016167"></p>
<p>运行结果如图</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423223025314.png" alt="运行结果"></p>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>位运算符除“按位与”和“按位或”运算符外，其他只能用于处理整数的操作数。位运算是完全针对位方面的操作。整型数据在内存中以二进制的形式表示，如int型变量7的二进制表示是00000000 00000000 00000000 00000111。</p>
<p>左边最高位是符号位，最高位是0表示正数，若为1则表示负数。负数采用补码表示，如-8的二进制表示为111111111 111111111 1111111 11111000。这样就可以对整型数据进行按位运算。</p>
<h4 id="“按位与”运算"><a href="#“按位与”运算" class="headerlink" title="“按位与”运算"></a>“按位与”运算</h4><p>“按位与”运算的运算符为“&amp;”，为双目运算符。“按位与”运算的运算法则是：如果两个整型数据a、b对应位都是1，则结果位才是1，否则为0。如果两个操作数的精度不同，则结果的精度与精度高的操作数相同。</p>
<h4 id="“按位或”运算"><a href="#“按位或”运算" class="headerlink" title="“按位或”运算"></a>“按位或”运算</h4><p>“按位或”运算的运算符为“|”，为双目运算符。“按位或”运算的运算法则是：如果两个操作数对应位都是0，则结果位才是0，否则为1。如果两个操作数的精度不同，则结果的精度与精度高的操作数相同</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423223701811.png" alt="5&amp;-4的运算过程"></p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423223715541.png" alt="3|6的运算过程"></p>
<h4 id="“按位取反”运算"><a href="#“按位取反”运算" class="headerlink" title="“按位取反”运算"></a>“按位取反”运算</h4><p>“按位取反”运算也称“按位非”运算，运算符为“~”，为单目运算符。“按位取反”就是将操作数二进制中的1修改为0，0修改为1</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423223834521.png" alt="~7的运算过程"></p>
<h4 id="“按位异或”运算"><a href="#“按位异或”运算" class="headerlink" title="“按位异或”运算"></a>“按位异或”运算</h4><p>“按位异或”运算的运算符是“^”，为双目运算符。“按位异或”运算的运算法则是：当两个操作数的二进制表示相同（同时为0或同时为1） 时，结果为0，否则为1。若两个操作数的精度不同，则结果数的精度与精度高的操作数相同</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423223910056.png" alt="image-20220423223910056"></p>
<p>除了上述运算符之外，还可以对数据按二进制位进行移位操作。</p>
<p>Java中的移位运算符有以下3种。</p>
<h5 id="1-lt-lt-：左移"><a href="#1-lt-lt-：左移" class="headerlink" title="1.&lt;&lt;：左移"></a>1.&lt;&lt;：左移</h5><p>左移就是将运算符左边的操作数的二进制数据，按照运算符右边操作数指定的位数向左移动，</p>
<h5 id="2-gt-gt-：右移。"><a href="#2-gt-gt-：右移。" class="headerlink" title="2.&gt;&gt;：右移。"></a>2.&gt;&gt;：右移。</h5><p>右边移空的部分补0。右移则复杂一些。当使用“&gt;&gt;”符号时，如果最高位是0，右移空的位就填入0；如果最高位是1，右移空的位就填入1</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423224256449.png" alt="image-20220423224256449"></p>
<p>3.&gt;&gt;&gt;：无符号右移。</p>
<p>Java还提供了无符号右移“&gt;&gt;&gt;”，无论最高位是0还是1，左侧被移空的高位都填入0。</p>
<blockquote>
<p>移位运算符适用的数据类型有byte、short、char、int和long。</p>
<p>移位可以实现整数除以或乘以2n的效果。例如，y&lt;&lt;2与y*4的结果相同；y&gt;&gt;1的结果与y&#x2F;2的结果相同。总之，一个数左移n位，就是将这个数乘以2n；一个数右移n位，就是将这个数除以2n。</p>
</blockquote>
<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>三元运算符的使用格式为：<code>条件式?值1:值2</code></p>
<p>三元运算符的运算规则为：若条件式的值为true，则整个表达式取值1，否则取值2。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>&lt;<span class="number">45</span>?<span class="literal">true</span>:<span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<p>如上例所示，表达式“20&lt;45”的运算结果返回真，那么boolean型变量b取值为true；相反，表达式“45&lt;20”返回为假，则boolean型变量b取值false。</p>
<p>三元运算符等价于if…else语句。</p>
<h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>通常优先级由高到低的顺序依次是：</p>
<p><strong>增量和减量运算&gt;算术运算&gt;比较运算&gt;逻辑运算&gt;赋值运算</strong></p>
<p>如果两个运算有相同的优先级，那么左边的表达式要比右边的表达式先被处理。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423224741068.png" alt="image-20220423224741068"></p>
<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>类型转换是将一个值从一种类型更改为另一种类型的过程。例如， 可以将String类型的数据“457”转换为数值型，也可以将任意类型的数据转换为String类型。</p>
<p>如果从低精度数据类型向高精度数据类型转换，则永远不会溢出， 并且总是成功的；而把高精度数据类型向低精度数据类型转换时，则会有信息丢失，有可能失败。</p>
<p>数据类型转换有两种方式，即<strong>隐式转换与显式转换。</strong></p>
<h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>从低级类型向高级类型的转换，系统将自动执行，程序员无须进行任何操作。这种类型的转换称为<strong>隐式转换</strong></p>
<p>这些类型按精度从低到高排列的顺序为byte &lt; short &lt; int &lt; long &lt; float &lt; double</p>
<p>使用int型变量为float型变量赋值，此时int型变量将隐式转换成float型变量。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423224921618.png" alt="image-20220423224921618"></p>
<p>此时执行输出语句，y的结果将是50.0</p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220423224935754.png" alt="种数据类型转换的一般规则" style="zoom:150%;" />

<h3 id="显式类型转换"><a href="#显式类型转换" class="headerlink" title="显式类型转换"></a>显式类型转换</h3><p>当把高精度的变量的值赋给低精度的变量时，必须使用显式类型转换运算（又称强制类型转换）</p>
<p>语法为：<code>(类型名)要转换的值</code></p>
<p>将不同的数据类型进行显式类型转换</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423225119706.png" alt="image-20220423225119706"></p>
<p>执行显式类型转换时，可能会导致精度损失。除boolean类型以外其他基本类型，都能以显式类型的方法实现转换。</p>
<blockquote>
<p>当把整数赋值给一个byte、short、int、long型变量时，不可以超出这些变量的取值范围，否则必须进行强制类型转换。例如：</p>
<p>byte b &#x3D; (byte)129;</p>
</blockquote>
<h2 id="代码注释与编码规范"><a href="#代码注释与编码规范" class="headerlink" title="代码注释与编码规范"></a>代码注释与编码规范</h2><p>在程序代码中适当地添加注释，可以提高程序的可读性和可维护性。好的编码规范可以使程序更易阅读和理解。</p>
<h3 id="代码注释"><a href="#代码注释" class="headerlink" title="代码注释"></a>代码注释</h3><p>通过在程序代码中添加注释可提高程序的可读性。</p>
<p>注释中包含了程序的信息，可以帮助程序员更好地阅读和理解程序。</p>
<p>在Java源程序文件的任意位置都可添加注释语句。注释中的文字Java编译器不进行编译， 所有代码中的注释文字对程序不产生任何影响。Java语言提供了3种添加注释的方法，分别为单行注释、多行注释和文档注释。</p>
<h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><p>“&#x2F;&#x2F;”为单行注释标记，从符号“&#x2F;&#x2F;”开始直到换行为止的所有内容均作为注释而被编译器忽略。</p>
<p>语法如下：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><img data-src="https://img.i-nmb.cn/inmb/wps5.png" alt="img"></td>
</tr>
</tbody></table>
<p>例如，以下代码为声明的int型变量添加注释：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><img data-src="https://img.i-nmb.cn/inmb/wps6.png" alt="img"></td>
</tr>
</tbody></table>
<h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><p>“&#x2F; * * &#x2F;”为多行注释标记，符号“&#x2F;* ”与“*&#x2F;”之间的所有内容均为注释内容。注释中的内容可以换行。</p>
<p>语法如下：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td><img data-src="https://img.i-nmb.cn/inmb/wps7.png" alt="img"></td>
</tr>
</tbody></table>
<p><img data-src="https://img.i-nmb.cn/inmb/wps8.png" alt="img"></p>
<p>但在多行注释中不可以嵌套多行注释，以下代码为非法：</p>
<p><img data-src="https://img.i-nmb.cn/inmb/wps10.png" alt="img"></p>
<h4 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h4><p>“&#x2F;** * &#x2F;”为文档注释标记。符号“&#x2F;**”与“ *&#x2F;”之间的内容均为文档注释内容。当文档注释出现在声明（如类的声明、类的成员变量的声明、类的成员方法声明等）之前时，会被Javadoc文档工具读取作为Javadoc文档内容。文档注释的格式与多行注释的格式相同。对于初学者而言，文档注释并不是很重要，了解即可。</p>
<h3 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h3><p>在学习开发的过程中要养成良好的编码习惯，因为规范的代码格式会给程序的开发与日后的维护提供很大方便。</p>
<h6 id="每条语句要单独占一行，一条命令要以分号结束。"><a href="#每条语句要单独占一行，一条命令要以分号结束。" class="headerlink" title="每条语句要单独占一行，一条命令要以分号结束。"></a>每条语句要单独占一行，一条命令要以分号结束。</h6><h6 id="在声明变量时，尽量使每个变量的声明单独占一行，即使是相同的数据类型也要将其放置在单独的一行上，这样有助于添加注释。对于局部变量应在声明的同时对其进行初始化。"><a href="#在声明变量时，尽量使每个变量的声明单独占一行，即使是相同的数据类型也要将其放置在单独的一行上，这样有助于添加注释。对于局部变量应在声明的同时对其进行初始化。" class="headerlink" title="在声明变量时，尽量使每个变量的声明单独占一行，即使是相同的数据类型也要将其放置在单独的一行上，这样有助于添加注释。对于局部变量应在声明的同时对其进行初始化。"></a>在声明变量时，尽量使每个变量的声明单独占一行，即使是相同的数据类型也要将其放置在单独的一行上，这样有助于添加注释。对于局部变量应在声明的同时对其进行初始化。</h6><h6 id="Java代码中，关键字与关键字间如果有多个空格，这些空格均被视作一个。"><a href="#Java代码中，关键字与关键字间如果有多个空格，这些空格均被视作一个。" class="headerlink" title="Java代码中，关键字与关键字间如果有多个空格，这些空格均被视作一个。"></a>Java代码中，关键字与关键字间如果有多个空格，这些空格均被视作一个。</h6><h6 id="由于程序的开发与维护不能是同一个人，所以应尽量使用简单的技术完成程序需要的功能。"><a href="#由于程序的开发与维护不能是同一个人，所以应尽量使用简单的技术完成程序需要的功能。" class="headerlink" title="由于程序的开发与维护不能是同一个人，所以应尽量使用简单的技术完成程序需要的功能。"></a>由于程序的开发与维护不能是同一个人，所以应尽量使用简单的技术完成程序需要的功能。</h6><h6 id="关键的方法要多加注释，这样有助于阅读者了解代码结构"><a href="#关键的方法要多加注释，这样有助于阅读者了解代码结构" class="headerlink" title="关键的方法要多加注释，这样有助于阅读者了解代码结构"></a>关键的方法要多加注释，这样有助于阅读者了解代码结构</h6>]]></content>
      <tags>
        <tag>Eclipse</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA学习知识总汇—JAVA语言基础</title>
    <url>/JAVA.html</url>
    <content><![CDATA[<p><strong>（以下文章大多参考《Java从入门到精通 第5版 明日科技》。故以下文章不采用 BY-NC-SA 许可协议）</strong></p>
<h1 id="JAVA语言基础"><a href="#JAVA语言基础" class="headerlink" title="JAVA语言基础"></a>JAVA语言基础</h1><p>要掌握并熟练应用Java语言，就需要对Java语言的基础进行充分的了解。</p>
<p><a href="https://i-nmb.cn/JAVA-Foundation.html">JAVA语言基础 | 一些笔记-i囡漫笔 (i-nmb.cn)</a></p>
<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><p>流程控制对于任何一门编程语言来说都是至关重要的，它提供了控制程序步骤的基本手段。</p>
<p><a href="https://i-nmb.cn/Process-control.html">流程控制 | 一些笔记-i囡漫笔 (i-nmb.cn)</a></p>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>字符串是Java程序中经常处理的对象，如果字符串运用得不好，将影响到程序运行的效率。</p>
<p><a href="https://i-nmb.cn/character-string.html">字符串 | 一些笔记-i囡漫笔 (i-nmb.cn)</a></p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组是最为常见的一种数据结构，是相同类型的用一个标识符封装到一起的基本类型数据序列或对象序列。</p>
<p><a href="https://i-nmb.cn/array.html">数组 | 一些笔记-i囡漫笔 (i-nmb.cn)</a></p>
]]></content>
      <tags>
        <tag>Eclipse</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>信息安全保障概述</title>
    <url>/Overview-of-information-security.html</url>
    <content><![CDATA[<p>本章概述了信息安全保障的相关内容。“信息安全保障背景”部分介绍了信息技术发展的各个阶段及其对社会产生的影响；“信息安全保障基础”部分讲述了信息安全发展阶段以及信息安全的含义、问题根源及其在社会中的地位和作用；“信息安全保障体系”部分讲解了信息安全保障基本体系框架，并详细阐述了典型的P2DR安全模型和IATF框架的基本原理；“信息安全保障基本实践”部分讲述了国内外实践概况和信息安全保障的基本工作内容</p>
<h2 id="大纲要求"><a href="#大纲要求" class="headerlink" title="大纲要求"></a>大纲要求</h2><p>1.信息安全保障的内涵和意义 </p>
<p>２.信息安全保障的总体思路和基本实践方法 </p>
<h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h2><p>1）了解信息技术发展各阶段的影响</p>
<p>2）了解信息安全发展各阶段的特征</p>
<p>3）理解信息安全的含义、问题根源及其所在国家和信息社会中的地位和作用</p>
<p>4）理解信息安全保障体系</p>
<p>5）理解P2DR模型的基本原理及其数学公式的含义</p>
<p>6）理解IATF纵深防御思想及其对信息系统技术4个方面的安全要求划分</p>
<p>7）了解国内外信息安全保障工作概况</p>
<p>8）理解信息安全保障工作的各部分内容及其主要原则</p>
<h2 id="信息安全保障背景"><a href="#信息安全保障背景" class="headerlink" title="信息安全保障背景"></a>信息安全保障背景</h2><h3 id="信息技术及其发展阶段"><a href="#信息技术及其发展阶段" class="headerlink" title="信息技术及其发展阶段"></a>信息技术及其发展阶段</h3><h4 id="什么是“信息”？"><a href="#什么是“信息”？" class="headerlink" title="什么是“信息”？"></a>什么是“信息”？</h4><p>香农认为：信息是用来减少不确定性的东西。</p>
<p>我国信息论专家钟义信把信息定义为：事物运动状态和状态变化的方式。</p>
<h5 id="下面比较分析信息与信息相关且容易混淆的概念："><a href="#下面比较分析信息与信息相关且容易混淆的概念：" class="headerlink" title="下面比较分析信息与信息相关且容易混淆的概念："></a>下面比较分析信息与信息相关且容易混淆的概念：</h5><p>信息与消息：信息是消息的外壳，消息则是信息的内核</p>
<p>消息与信号：信号是信息的载体，信息则是信号的承载内容</p>
<p>信息与数据：数据是记录信息的一种形式</p>
<p>数据和情报：情报是秘密的专门的一类信息，所有的情报都是信息，但信息并不一定是情报</p>
<p>信息与知识：知识是从信息中抽象出的产物，是信息的特殊子集</p>
<p>他们的关系如图所示</p>
<p><img data-src="https://inmb.oss-cn-shenzhen.aliyuncs.com/inmb/image-20220501021715868.png" alt="信息与信息相关且容易混淆的概念的关系"></p>
<h4 id="信息技术的定义"><a href="#信息技术的定义" class="headerlink" title="信息技术的定义"></a>信息技术的定义</h4><p>笼统的讲，信息技术是能够延伸或拓展人的信息能力的手段和方法</p>
<p>信息技术包括生产和应用两个方面。</p>
<p>信息技术的生产主要体现在信息技术产业，包括计算机软硬件、电信设备、电子生产等；</p>
<p>信息技术的应用则体现在信息技术的扩散上，包括信息服务、管理信息系统等。</p>
<p>在信息技术系统中，微电子技术、通信技术、计算机技术和网络技术可以称为信息技术的核心它们的发展进程体现了信息技术的发展过程。</p>
<p><img data-src="https://inmb.oss-cn-shenzhen.aliyuncs.com/inmb/%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF.png" alt="信息技术"></p>
<h4 id="信息技术的产生和发展："><a href="#信息技术的产生和发展：" class="headerlink" title="信息技术的产生和发展："></a>信息技术的产生和发展：</h4><p>信息技术的产生与发展，大致经历了如下3个阶段</p>
<p>第一阶段，电讯技术的发明。（可以追溯19世纪30年代电报电话的发明）</p>
<p>电讯技术的出现为信息技术的出现与发展奠定了基础。</p>
<p>第二阶段，计算机技术的发展。</p>
<blockquote>
<p>1945年，现计算机之父冯·诺依曼等提出了“存储程序通用电子计算机方案”——EDVAC。1946年2月1日，世界上第一台现代电子计算机“埃尼阿克(ENIAC)”诞生于美国宾夕法尼亚大学。现代计算机一直沿用着冯·诺依曼体系结构，可见其对计算机技术发展的影响。</p>
</blockquote>
<p>计算机技术的发展和应用，加快了人类奔向信息时代的步伐。</p>
<p>第三阶段，互联网技术的发展。</p>
<p>前两个阶段只有局部意义，影响有限。</p>
<p>20世纪60年代末，美国出现了第一个用于军事目的计算机网络ARPAnet。ARPAnet研究产生的一项非常重要的成果就是TCP&#x2F;IP协议(Transmission Control Protocol&#x2F;Internet Protocol)，即传输控制协议&#x2F;互联协议，使得连接到网络上的所有算机能够相互交流信息。</p>
<p>20世纪90年代，计算机网络发展成为全球性网络——因特网(Intnet)，计算机网络技术和网络应用得到了迅猛的发展，这时段才把电信、电话、电视、计算机、互联网络等连接起来，实现多媒体传输。</p>
<img data-src="https://inmb.oss-cn-shenzhen.aliyuncs.com/inmb/%E7%AC%AC%E4%B8%89%E9%98%B6%E6%AE%B5%EF%BC%9A%E4%BA%92%E8%81%94%E7%BD%91%E6%8A%80%E6%9C%AF%E7%9A%84%E5%8F%91%E5%B1%95.png" alt="互联网技术的发展" style="zoom:20%;" />

<h3 id="信息技术的影响"><a href="#信息技术的影响" class="headerlink" title="信息技术的影响"></a>信息技术的影响</h3><h4 id="积极影响"><a href="#积极影响" class="headerlink" title="积极影响"></a>积极影响</h4><h5 id="1）对社会发展的影响"><a href="#1）对社会发展的影响" class="headerlink" title="1）对社会发展的影响"></a>1）对社会发展的影响</h5><p><strong>科学是第一生产力</strong></p>
<p>信息技术的广泛应用，引发了社会的深刻变革，加速了社会生产力的发展和人们生活质量的提高</p>
<p><u>信息资源</u>继物质和能源之后将成信息化社会最主要的支柱之一。</p>
<p>减少地域差别和经济发展造成的差异</p>
<h5 id="2）对科技进步的影响"><a href="#2）对科技进步的影响" class="headerlink" title="2）对科技进步的影响"></a>2）对科技进步的影响</h5><p>极大地推动了科学技术的发展。</p>
<p>计算机技术的应用，帮助人门攻克了一个又一个科学难题。</p>
<p>便于验证各种科学假设。</p>
<p>带动了一批尖端技术的发展。</p>
<p>信息技术在基础学科中的应用及与其他学科的融合促进了新学科(如计算物理、计算化学等)和交叉学科(如人工智能、电子商务、大数据技术等)的产生发展。</p>
<h4 id="消极影响"><a href="#消极影响" class="headerlink" title="消极影响"></a>消极影响</h4><h5 id="1）信息泛滥"><a href="#1）信息泛滥" class="headerlink" title="1）信息泛滥"></a>1）信息泛滥</h5><p>信息量急剧增长，并且人们消耗大量的时间却找不到有用的信息</p>
<h5 id="2）信息污染"><a href="#2）信息污染" class="headerlink" title="2）信息污染"></a>2）信息污染</h5><p>一些错误信息、虚假信息、污秽信息等混杂在各种信息资源中，人们如果不加以分析，容易深受其害</p>
<h5 id="3）信息犯罪"><a href="#3）信息犯罪" class="headerlink" title="3）信息犯罪"></a>3）信息犯罪</h5><p>人们对信息技术的依赖程度越来越高，一些不法分子利用信息技术手段以及信息系统本身的安全漏洞进行犯罪活动，危害着正常的社会秩序。</p>
<h2 id="信息安全保障基础"><a href="#信息安全保障基础" class="headerlink" title="信息安全保障基础"></a>信息安全保障基础</h2><h3 id="信息安全发展阶段"><a href="#信息安全发展阶段" class="headerlink" title="信息安全发展阶段"></a>信息安全发展阶段</h3><p>信息安全的发展大致经历了三个阶段：</p>
<p>信息保密阶段&gt;计算机安全阶段&gt;信息安全保障阶段</p>
<h4 id="通信保密阶段"><a href="#通信保密阶段" class="headerlink" title="通信保密阶段"></a>通信保密阶段</h4><p>当代信息安全学起源于20世纪40年代的通信保密</p>
<p>香农以概率统计的方法对消息源、密钥源、接收和截获的消息进行数学描述和分析，用不确定性来度量密码体制的保密性阐明了密码系统、完善保密性、纯密码、理论保密性和实际保密性等重要概念，从而大大深化了人们对于信息保密和密码学的理解。</p>
<h4 id="计算机安全阶段"><a href="#计算机安全阶段" class="headerlink" title="计算机安全阶段"></a>计算机安全阶段</h4><p>1965年，美国率先提出了计算机安全(COMPUSEC)。人们对信息安全的关注扩大为“密性、访问控制与认证”。</p>
<p>在这一阶段，计算机主要的用途是军事和科研。访问制关注信息的机密性，这一时期提出了强制访问控制策略和自主访问控制策略。</p>
<p>其间进行的重要工作包括：1969年B.W.Lampson提出的访问控制矩阵，70年代 Harrison、Ruzzo和Ullman提出的HRU模型，1976年David Bell和Leonard LaPadula提出的BLP模型，以及1977年Biba提出的BIBA模型。其中，BLP模型是影响深远的强制访问控制模型；BIBA模型是提出较早的面向完整性的访问控制模型；HRU模型给出了形式化的访问控制矩阵的描述</p>
<p><strong>在这一时期、密码学仍然得到了快速发展，最有影响的有两件大事件。</strong></p>
<p>第一件是Diffie和Hellman首次证明了在发送者和接收者之间无密钥交换的保密通信是可能的，从而开创了公钥密码学的新纪元。</p>
<p>第二件是美国于1977年制定的数据加密标准 DES(Data Encryption Standard)，它为加密算法的标准化奠定了基础。</p>
<h4 id="信息安全保障阶段"><a href="#信息安全保障阶段" class="headerlink" title="信息安全保障阶段"></a>信息安全保障阶段</h4><p>20世纪90年代以后，开始倡导信息保障(Information Assurance，IA)。</p>
<p>1995年，在研究信息安全及网络战防御理论过程中，美国国防部提出了“信息安全保障体系”(IA)概念，并给出了“保护(Protection)—监测(Detection)一响应(Response)”三环节动态模型，即PDR模型。后来增加了恢复(Restore)，变为PDRR模型。</p>
<p>BS 7799标准是由英国标准协会制定的信息安全管理标准，是国际上具有代表性的信息安全管理体系标准。该信息安全管理标准包括两个部分，即BS 7799-1:1999《信息安全管理实田则》和BS 7799-2:1999《信息安全管理体系规范》。其中 BS 7799-1标准已经于2000年正式换为ISO国际标准，即ISO 17799信息安全管理体系实施指南。2005年，修订后的ISO&#x2F;IE 7799被集成到ISO 27000系列标淮中，标准号为ISO&#x2F;IEC 27002，它综合了信息安全管理方面委的控制措施，可为各类组织和机构在信息安全方面提供建议性指南。BS 7799&#x2F;ISO 17799主要章节包括范围、术语和定义、控制细则。BS 7799-2还包括了信！安全管理体系(Information Security Management System，ISMS)的概念，基本内容涉及信息安全</p>
<h3 id="信息安全的定义"><a href="#信息安全的定义" class="headerlink" title="信息安全的定义"></a>信息安全的定义</h3>]]></content>
      <tags>
        <tag>信息安全技术</tag>
        <tag>计算机三级</tag>
      </tags>
  </entry>
  <entry>
    <title>流程控制—JAVA语言基础</title>
    <url>/Process-control.html</url>
    <content><![CDATA[<p>通过阅读本章，您可以：</p>
<blockquote>
<p>理解<strong>Java</strong>语言中复合语句的使用方法</p>
<p>掌握<strong>if</strong>条件语句的使用方法</p>
<p>了解<strong>if</strong>语句与<strong>switch</strong>语句的区别</p>
<p>掌握<strong>while</strong>循环语句的使用方法</p>
<p>掌握<strong>do…while</strong>循环语句的使用方法</p>
<p>了解<strong>while</strong>语句与<strong>do…while</strong>语句的区别</p>
<p>掌握<strong>for</strong>语句的使用方法</p>
<p>了解<strong>foreach</strong>语句的使用方法</p>
</blockquote>
<h2 id="复合语句"><a href="#复合语句" class="headerlink" title="复合语句"></a>复合语句</h2><p>与C语言及其他语言相同，Java语言的复合语句是以整个块区为单位的语句，所以又称块语句。复合语句由开括号“{”开始，闭括号“}”结束。</p>
<p>在前面的学习中已经接触到了这种复合语句，例如，在定义一个类或方法时，类体就是以“{ }”作为开始与结束的标记，方法体同样也是以“{ }”作为标记。</p>
<p>在项目中创建类Compound，在主方法中定义复合语句块，其中包含另一复合语句块。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423230926861.png" alt="image-20220423230926861"></p>
<p>运行结果</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423230948272.png" alt="image-20220423230948272"></p>
<p>在使用复合语句时要注意，复合语句为局部变量创建了一个作用 域，该作用域为程序的一部分，在该作用域中某个变量被创建并能够被使用。如果在某个变量的作用域外使用该变量，则会发生错误，例如，在本实例中，如果在复合语句外使用变量y、z、b将会出现错误，而变量x可在整个方法体中使用。</p>
<h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>条件语句可根据不同的条件执行不同的语句。条件语句包括if条件语句与switch多分支语句。</p>
<h3 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h3><p><img data-src="https://img.i-nmb.cn/inmb/image-20220423231850114.png" alt="语法"></p>
<p><img data-src="https://img.i-nmb.cn/inmb/wps13.jpg" alt="img">布尔表达式：必要参数，表示最后返回的<strong>结果必须是一个布尔值</strong>。它可以是一个单纯的布尔变量或常量，也可以是使用关系或布尔运算符的表达式。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/wps14.jpg" alt="img">语句序列：可选参数。可以是一条或多条语句，当表达式的值为true时执行这些语句。若语句序列中仅有一条语句，则可以省略条件语句中的“{ }”。</p>
<p>例4.2】语句序列中只有一条语句，实例代码如下：</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423232039222.png" alt="image-20220423232039222"></p>
<p><img data-src="https://img.i-nmb.cn/inmb/wps16.png" alt="img"> </p>
<p>条件语句后的语句序列省略时，则可以保留外面的大括号，也可以省略大括号。然后在末尾添加“;”。如下所示的两种情况都是正确的。</p>
<p>省略了if条件表达式中的语句序列，实例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="keyword">if</span>(b);</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="keyword">if</span>(b)&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>在项目中创建类Getif，在主方法中定义整型变量。使用条件语句判断两个变量的大小来决定输出结果。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423232205949.png" alt="image"></p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423232231860.png" alt="经过"></p>
<p>运行结果</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423232248110.png" alt="运行结果"></p>
<h3 id="if…else语句"><a href="#if…else语句" class="headerlink" title="if…else语句"></a>if…else语句</h3><p>if…else语句是条件语句中最常用的一种形式，它会针对某种条件有选择地做出处理。通常表现为“如果满足某种条件，就进行某种处理，否则就进行另一种处理”。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(表达式)&#123;</span><br><span class="line">    若干语句</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    若干语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>if后面“()”内的表达式的值必须是boolean型的</p>
<p>如果表达式的值为true，则执行紧跟if语句的复合语句；如果表达式的值为false，则执行else后面的复合语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//if…else语句可以使用三元运算符进行简化。如下面的代码：</span></span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">0</span>)</span><br><span class="line">    b = a;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    b = -a;</span><br><span class="line"><span class="comment">//可以简写成：</span></span><br><span class="line">b = a &gt; <span class="number">0</span>?a:-a;</span><br></pre></td></tr></table></figure>

<h3 id="if…else-if多分支语句"><a href="#if…else-if多分支语句" class="headerlink" title="if…else if多分支语句"></a>if…else if多分支语句</h3><p><img data-src="https://img.i-nmb.cn/inmb/image-20220423232651911.png" alt="多分支语句语法"></p>
<h3 id="switch多分支语句"><a href="#switch多分支语句" class="headerlink" title="switch多分支语句"></a><strong>switch</strong>多分支语句</h3><p>在Java中，可以用switch语句将动作组织起来，以一个较简单明了的方式来实现“多选一”的选择。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423232746892.png" alt="语法"></p>
<p>switch语句中表达式的值必须是<strong>整型、字符型或字符串</strong>类型，常量值1~n必须也是<strong>整型、字符型或字符串</strong>类型。</p>
<p>switch语句首先计算表达式的值，如果表达式的值和某个case后面的常量值相同，则执行该case语句后的若干个语句直到遇到break语句为止。</p>
<p>在项目中创建类GetSwitch，在主方法中应用switch语句将周一到周三的英文单词打印出来。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423232852466.png" alt="image"></p>
<p>结果如下</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423233123639.png" alt="结果"></p>
<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>循环语句就是在满足一定条件的情况下反复执行某一个操作。在Java中提供了3种常用的循环语句，分别是while循环语句、do…while循环语句和for循环语句</p>
<h3 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a><strong>while</strong>循环语句</h3><p>while语句也称条件判断语句，它的循环方式为利用一个条件来控制是否要继续反复执行这个语句。</p>
<p>语法如下</p>
<p><img data-src="https://img.i-nmb.cn/inmb/wps17.png" alt="img"></p>
<p>当条件表达式的返回值为真时，则执行“{}”中的语句，当执行完“{}”中的语句后，重新判断条件表达式的返回值，直到表达式返回的结果为假时，退出循环。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423233319261.png" alt="image"></p>
<h3 id="do…while循环语句"><a href="#do…while循环语句" class="headerlink" title="do…while循环语句"></a>do…while循环语句</h3><p><img data-src="https://img.i-nmb.cn/inmb/image-20220423233406284.png" alt="语法"></p>
<p>先做do，后判断。也就是说，do…while循环语句中“{}”中的程序段至少要被执行一次。</p>
<p><strong>do…while语句在结尾处多了一个分号（;）</strong></p>
<h3 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h3><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><p><img data-src="https://img.i-nmb.cn/inmb/image-20220423233521900.png" alt="语法"></p>
<p>表达式1为初始化变量，只执行一次；</p>
<p>表达式2为循环条件，值为boolean型的表达式，boolean型值为false，则跳出循环</p>
<p>表达式3为循环后操作表达式，每一次循环后都会执行一次</p>
<h4 id="foreach语句"><a href="#foreach语句" class="headerlink" title="foreach语句"></a>foreach语句</h4><p>foreach语句是for语句的特殊简化版本，不能完全取代for语句，但任何foreach语句都可以改写为for语句版本。foreach语句在遍历数组等方面为程序员提供了很大的方便</p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220423233935765.png" alt="语法" style="zoom:200%;" />

<p>oreach语句中的元素变量x，不必对其进行初始化。下面通过简单的例子来介绍foreach语句是如何遍历一维数组的。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423234122976.png" alt="image"></p>
<p>运行结果如图所示</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423234140928.png" alt="结果"></p>
]]></content>
      <tags>
        <tag>Eclipse</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>0基础学Java-使用Eclipse</title>
    <url>/Use-of-eclipse.html</url>
    <content><![CDATA[<p>Eclipse是目前最流行的Java语言开发工具之一，它具有强大的代码辅助功能，可以帮助程序开发人员自动完成语法修正、补全文字、代码修正、API提示等编码工作，从而节省 大量的时间和精力。</p>
<p>本篇将介绍如何使用 Eclipse完成HelloJava程序的编写和运行。</p>
<h2 id="创建Java项目"><a href="#创建Java项目" class="headerlink" title="创建Java项目"></a>创建Java项目</h2><p>在Eclipse中编写程序，必须先创建项目，然后单击“下一步”或“完成”按钮</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/10/6309db409180e48b.png" alt="创建项目对话框" style="zoom:50%;" />

<p>此时将弹出如下图所示的新建模块化声明文件对话框。模块化开发是JDK 9新增的特性，但模块化开发过于复杂，新建的模块化声明文件也会影响Java项目的运行，因此这里单击Don’t Create按钮。至此，已完成Java项目的新建操作。</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/10/fbbb21705a481928.png" style="zoom:100%;" />







<h2 id="创建Java类文件"><a href="#创建Java类文件" class="headerlink" title="创建Java类文件"></a>创建Java类文件</h2><p>创建Java类文件时，会自动打开Java编辑器。创建Java类文件可以 通过“新建Java类”向导来完成。</p>
<p>在Eclipse菜单栏中选择“文件”&#x2F;“新建”&#x2F;“类”命令，将打开“新建Java类”向导对话框</p>
<p>使用该向导对话框创建Java类的步骤如下：<br>（1）在“源文件夹”文本框中输入项目源程序文件夹的位置。<em>通常向导会自动填写该文本框，<strong>没有特殊情况，不需要修改。</strong></em><br>（2）在“包”文本框中输入类文件的包名，这里暂时默认为空，不输入任何信息，这样就会使用Java工程的默认包。<br>（3）在“名称”文本框中输入新建类的名称，如HelloJava。<br>（4）选中public static void main(String[] args)复选框，向导在创建类文件时，<strong>会自动为该类添加main()方法</strong>，使该类成为可以运行的主类。</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/10/f6f98fbf32e000b8.png" style="zoom:80%;" />







<h2 id="使用编辑器编写程序代码"><a href="#使用编辑器编写程序代码" class="headerlink" title="使用编辑器编写程序代码"></a>使用编辑器编写程序代码</h2><h3 id="打开Java编辑器"><a href="#打开Java编辑器" class="headerlink" title="打开Java编辑器"></a>打开Java编辑器</h3><p>在使用向导创建Java类文件之后，会自动打开Java编辑器编辑新创建的Java类文件。除此之外，打开Java编辑器最常用的方法是在“包资源管理器”视图中双击Java源文件或在Java源文件处右击并在弹出的快捷菜单中选择“打开方式”&#x2F;“Java编辑器”命令。</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2022/04/10/14162f47c0e26b5c.png"></p>
<p>Java编辑器以不同的样式和颜色突出显示 Java语法。这些突出显示的语法包括以下几个方面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">程序代码注释。 </span><br><span class="line"></span><br><span class="line">Javadoc注释。 </span><br><span class="line"></span><br><span class="line">Java关键字。</span><br></pre></td></tr></table></figure>

<h3 id="编写Java代码"><a href="#编写Java代码" class="headerlink" title="编写Java代码"></a>编写Java代码</h3><p>Eclipse的强大之处还在于**<u>编写Java程序代码时，可以使用Ctrl+Alt+&#x2F;快捷 键自动补全Java关键字</u>**，创建HelloJava类之后，向导会自动构建HelloJava类结构的部分代码，并建立main()方法。</p>
<blockquote>
<p>技巧<br>在Eclipse安装后，Java编辑器文本字体为Consolas 10。采用这个字 体时，中文显示比较小，不方便查看。这时，可以选择主菜单上的“窗 口”&#x2F;“首选项”命令，打开“首选项”对话框，在左侧的列表中选择“常 规”&#x2F;“外观”&#x2F;“颜色和字体”节点，在右侧选择Java&#x2F;“Java编辑器文本字 体”节点，并单击“编辑”按钮，在弹出的对话框中选择Courier New字 体，单击“确定”按钮，返回到“首选项”对话框中，单击“应用”按钮即 可。另外，“调试”&#x2F;“控制台字体”节点也需要进行以上修改。</p>
</blockquote>
<p>我们按照图片的代码进行模仿编写</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2022/04/10/24f9889eb0b05c18.png"></p>
<p>它包括private、static、String 3个关键字。这3个关键字在记事本程序中手动输入虽然不会花多长时间，但却无法避免出现输入错误的情况。</p>
<p>如果是名称更长、更复杂的关键字，就更容易出现错误。而在Eclipse的Java编辑器 中，可以只输入关键字的部分字母，<del>然后使用Ctrl+Alt+&#x2F;快捷键自动补全Java关键字，如图所示。</del>（对于2021-12-R版本已失效）</p>
<p>点击窗口&gt;首选项&gt;Java&gt;编辑器&gt;内容辅助，自动激活的自动激活触发器由“.”改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.abcdefghijklmnopqrstuvwxyz(</span><br></pre></td></tr></table></figure>

<img data-src="https://s3.bmp.ovh/imgs/2022/04/10/b15ff880ad6147dd.png" alt="内容辅助" style="zoom:80%;" />



<p>使用System.out.println()方法输出文字信息到控制台，这是程序开发时最常使用的方法之一。</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2022/04/10/f22b26809d2aca22.png"></p>
<p><img data-src="https://s3.bmp.ovh/imgs/2022/04/10/a1fc84a9c819939f.png"></p>
<h3 id="运行Java程序"><a href="#运行Java程序" class="headerlink" title="运行Java程序"></a>运行Java程序</h3><p>HelloJava类包含main()方法，它是一个可以运行的主类。例如，在 Eclipse中运行HelloJava程序，可以在“包资源管理器”视图的HelloJava文件处右击，在弹出的菜单中选择“运行方式”&#x2F;“ Java应用程序”命令。程序运行</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/10/9aa8fb3ba151bcb9.png" alt="运行" style="zoom:67%;" />

<img data-src="https://s3.bmp.ovh/imgs/2022/04/10/0c512ba4c274c58f.png" alt="运行结果" style="zoom:150%;" />

<h2 id="程序调试"><a href="#程序调试" class="headerlink" title="程序调试"></a>程序调试</h2><p>读者在程序开发过程中会不断体会到程序调试的重要性。为验证 Java单元的运行状况，以往会在某个方法调用的开始和结束位置<strong>分别使用System.out.println()方法输出状态信息</strong>，并根据这些信息判断程序执行状况，<strong>但这种方法比较原始，而且经常导致程序代码混乱</strong>（导出的都是 System.out.println()方法）。</p>
<p>使用Eclipse的Java调试器需要设置程序断点，然后使用单步调试分别执行程序代码的每一行。</p>
<h3 id="添加断点"><a href="#添加断点" class="headerlink" title="添加断点"></a>添加断点</h3><p>设置断点是程序调试中必不可少的手段，Java调试器每次遇到程序断点时都会将<strong>当前线程挂起</strong>，即**<u>暂停当前程序的运行</u>**。</p>
<p>1）在Java编辑器中显示代码行号的位置双击添加或删除当前行的断点，</p>
<p><img data-src="https://s1.ax1x.com/2022/04/10/LkjbT0.png" alt="1）双击行代码"></p>
<p>2）或者在当前<strong>行号的位置</strong>右击，在弹出的快捷菜单中选择“切换断点”命令实现断点的添加与删除</p>
<p><img data-src="https://s1.ax1x.com/2022/04/10/LkvLDA.png" alt="2）右击行号"></p>
<h3 id="以调试方式运行Java程序"><a href="#以调试方式运行Java程序" class="headerlink" title="以调试方式运行Java程序"></a>以调试方式运行Java程序</h3><p>要在Eclipse中调试HelloJava程序，可以在“包资源管理器”视图中 HelloJava文件处右击，在弹出的快捷菜单中选择“调试方式”&#x2F;“ Java应用程序 ” 命令。在代码设置了断点，调试器将在该断点处 挂起当前线程，使程序暂停</p>
<p>程序执行到断点被暂停后，可以通过“调试”视图工具栏上的按钮执 行相应的调试操作，如运行、停止等。</p>
<img data-src="https://s1.ax1x.com/2022/04/10/LkxfMQ.png" style="zoom:67%;" />





<h3 id="程序调试-1"><a href="#程序调试-1" class="headerlink" title="程序调试"></a>程序调试</h3><p>程序执行到断点被暂停后，可以通过“调试”视图工具栏上的按钮执 行相应的调试操作，如运行、停止等</p>
<p><img data-src="https://s1.ax1x.com/2022/04/10/LAS9mj.png"></p>
<h4 id="单步跳过"><a href="#单步跳过" class="headerlink" title="单步跳过"></a>单步跳过</h4><p>在“调试”视图的工具栏中单击按钮或按F6键，将执行单步跳过操作，即<strong>运行单独的一行程序代码</strong>，但是**<u>不进入调用方法的内部</u>**，然后<u>跳到下一个可执行点并暂挂线程</u>。</p>
<h4 id="单步跳入"><a href="#单步跳入" class="headerlink" title="单步跳入"></a>单步跳入</h4><p>在“调试”视图的工具栏中单击按钮或按F5键，**将跳入调用方法或对象的<u>内部</u>**，单步执行程序并暂挂线程。</p>
]]></content>
      <tags>
        <tag>Eclipse</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>2022年度SMUCTF的WP笔记</title>
    <url>/SMUCTF.html</url>
    <content><![CDATA[<p>福建三明学院信息工程学院网络攻防大赛（SMUCTF）是由共青团三明学院信息工程学院委员会主办、信息工程学院网络安全协会承办的一场关于网络安全技术练习的CTF夺旗赛。</p>
<p>本篇文章将展示笔者对2022年度福建三明学院信息工程学院网络攻防大赛（SMUCTF）的部分解题笔记（个人理解）。能解出来的题目，手把手教程！</p>
<h2 id="》MISC"><a href="#》MISC" class="headerlink" title="》MISC"></a>》MISC</h2><h3 id="SMUGIFQR"><a href="#SMUGIFQR" class="headerlink" title="SMUGIFQR"></a>SMUGIFQR</h3><img data-src="https://s3.bmp.ovh/imgs/2022/04/16/e30c5fd3b8c6685f.png" alt="SMUGIFQR题目" style="zoom:100%;" />

<p>点击<a href="https://inmb.lanzouf.com/itghC039fp0d">下载附件</a>得到一个gif，不同的图片查看器有不同的高度（判断应该是修改了高度）</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/16/9fd0133122202280.png" alt="两个查看器不一样" style="zoom:33%;" />

<p>这个gif包含了多个二维码，每个二维码只停留不到1秒钟的时间。</p>
<p>Stegsolve是基于java编写（<strong>需要安装Java环境</strong>），它能够将掩藏在图形中的重要信息解析过来，它能读取图片中的链接、文本信息，软件操作相对简单。</p>
<p>用Stegsolve打开解压得到的flag.gif</p>
<p>接下来使用Stegsolve提供的“Frame Browser”，</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/17/f899c5d43f633159.png" alt="Frame Browser" style="zoom:80%;" />

<p>在Frame Browser中点击 &gt; 按钮，可以逐帧查看，用二维码扫描器逐一扫描二维码得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;SMUQRs-Are-FUN!&#125;</span><br></pre></td></tr></table></figure>



<h3 id="冰墩墩的汉信码"><a href="#冰墩墩的汉信码" class="headerlink" title="冰墩墩的汉信码"></a>冰墩墩的汉信码</h3><img data-src="https://s3.bmp.ovh/imgs/2022/04/16/be5f0e20f8fb6456.png" alt="题目" style="zoom:100%;" />

<p>点击<a href="https://inmb.lanzouf.com/iXNyf039hsad">下载附件</a>得到一张冰墩墩的图片</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/16/30c9b2a890861418.png" alt="冰墩墩" style="zoom:50%;" />

<p>说是有汉信码，一定在图片上，同样使用Stegsolve，调整好窗口大小后直接按下菜单栏的 &gt; 键，在Red plane 0 的频道画面下出现汉信码</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/16/2629c499012a53ff.png" alt="找到汉信码" style="zoom:80%;" />

<blockquote>
<h4 id="汉信码是我国具有完全自主知识产权的特殊二维码"><a href="#汉信码是我国具有完全自主知识产权的特殊二维码" class="headerlink" title="汉信码是我国具有完全自主知识产权的特殊二维码"></a>汉信码是我国具有完全自主知识产权的特殊二维码</h4><p>汉信码具有知识产权免费、汉字编码能力强、抗污损、抗畸变、信息容量大等特点。</p>
<p>要使用特定的手机APP：<a href="https://inmb.lanzouf.com/i5IJj039jdfa">中国编码（Android点击下载）</a>  才能扫描</p>
</blockquote>
<p>手机安装中国编码APP后扫描得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dear SMUCTFers, congratulations on getting the flag：flag&#123;Have_YOu_ever_Heard_0f_HanXinMa&#125;</span><br></pre></td></tr></table></figure>

<p>得到flag{Have_YOu_ever_Heard_0f_HanXinMa}</p>
<h3 id="listentomusic"><a href="#listentomusic" class="headerlink" title="listentomusic"></a>listentomusic</h3><img data-src="https://s3.bmp.ovh/imgs/2022/04/16/506ebadb42deede4.png" alt="listentomusic" style="zoom:100%;" />

<p>点击<a href="https://inmb.lanzouf.com/ilnsL039jv8b">下载附件</a>解压得到一个音频和另一个压缩包</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/16/745c327299c376cf.png" alt="附件内容" style="zoom:100%;" />

<p>pass.wav中是电话拨号音频，使用 在线电话拨号音频解密：<a href="http://dialabc.com/sound/detect/">Detect DTMF Tones (dialabc.com)</a>，选择文件后进行解密得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1933056020</span><br></pre></td></tr></table></figure>

<img data-src="https://s3.bmp.ovh/imgs/2022/04/16/249c8b814feadefa.png" alt="拨号" style="zoom:100%;" />

<p>带到加密包输入密码1933056020得到lsb-silenteye，</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/16/44f1678ace85f9ce.png" alt="lsb-silenteye" style="zoom:100%;" />

<p>根据提示使用<a href="http://www.opdown.com/soft/88597.html">SilentEye工具</a>，将音频拖进SilentEye工具，点击Decode，在弹出窗口再次点击decode</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/16/90e5de59fefbe6ec.jpg" alt="音频拖进SilentEye工具" style="zoom:67%;" />



<p>得到以下提示，下载得到SSTVflag，</p>
<blockquote>
<p>链接：<a href="https://pan.baidu.com/s/1Jsy4naAx3JvOaGWmKeKAfg">https://pan.baidu.com/s/1Jsy4naAx3JvOaGWmKeKAfg</a> </p>
<p>提取码：1mci</p>
</blockquote>
<p>在网络上的教程大多对sstv的解法是使用kali的Qsstv，但是我的kali中的qsstv显示，这个音频不支持，所以我们使用另外的方法</p>
<p>在手机上下载<a href="https://inmb.lanzouf.com/iAntQ039lc0b">Robot36（Android点击下载）</a></p>
<p>手机打开软件使用电脑播放音频得到</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/16/53ce9a6d142b5d0f.jpg" alt="得到图片" style="zoom:25%;" />

<p>图片中有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;D0_YOu_know_SMUmusic_ForWAVE&#125;</span><br></pre></td></tr></table></figure>







<h3 id="High-level-SMUpdf"><a href="#High-level-SMUpdf" class="headerlink" title="High-level_SMUpdf"></a>High-level_SMUpdf</h3><p><img data-src="https://s3.bmp.ovh/imgs/2022/04/17/804f2e86a42eee39.png"></p>
<p>点击<a href="https://inmb.lanzouf.com/iKrmt03bzauf">这里下载附件</a>，得到一个压缩包，其中flag.pdf为解密文件</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/17/a4b60ca0889d5a45.png" style="zoom:150%;" />

<p>打开pass.pdf，发现改文件受到密码保护，不允许查看</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2022/04/17/050f747e6ef42c55.png"></p>
<p>我们打开PDF Password Recovery（或者其他PDF密码解锁爆破工具），选择恢复用户密码使用枚举攻击</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2022/04/17/da1d4f7ea58cb215.png"><img data-src="https://s3.bmp.ovh/imgs/2022/04/17/95c950b9d9325661.png"></p>
<p>使用1-8位密码字符数字组合</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2022/04/17/598bfb649a367d3f.png"></p>
<p>得到pass密码，使用密码并且使用PDF编辑器打开pass.pdf文件</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2022/04/17/9a3fff0c38e1517a.png"></p>
<p>在最后一栏有隐形的字，把他复制到记事本中，得到解压密码<u>6ef23c0845c43d82e0614baeba084d11</u></p>
<p><img data-src="https://s3.bmp.ovh/imgs/2022/04/17/3a1d488889f00112.png">——&gt;password：6ef23c0845c43d82e0614baeba084d11</p>
<p>打开flag文件后得到包含11张图片的PDF，使用winhex打开发现他拥有两个PDF的文件头，推断使用了<strong>wbStego4open</strong>把文件隐藏到PDF文件中</p>
<img data-src="https://s3.bmp.ovh/imgs/2022/04/17/e279b4d9fb3fa1dc.png" alt="两个文件头" style="zoom:80%;" />

<p>我们使用wbStego4.3open.exe（百度上不好找这个工具，<a href="https://inmb.lanzouf.com/iKrmt03bzauf">点击这里下载</a>），第二步中选择Decode ，输入文件地址后，下一步中选择PDF</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2022/04/17/40b497eb32245618.png"></p>
<p><img data-src="https://s3.bmp.ovh/imgs/2022/04/17/b190cf34c3a78cd7.png"></p>
<p>直接下一步，不用输入，之后随便输入命名txt文件，然后点击继续，之后在工具的根目录下出现自己命名的txt文件</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2022/04/17/d4db801f126739eb.png">——&gt;<img data-src="https://s3.bmp.ovh/imgs/2022/04/17/9bcefd601c6cdb56.png"><img data-src="https://s3.bmp.ovh/imgs/2022/04/17/af05bee0f1c3e5c3.png"></p>
<p>得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;0urSMUPDF&#125;</span><br></pre></td></tr></table></figure>



<h3 id="病毒文件恢复"><a href="#病毒文件恢复" class="headerlink" title="病毒文件恢复"></a>病毒文件恢复</h3><p><img data-src="https://s3.bmp.ovh/imgs/2022/04/17/bf0cfc60b91a1b2f.png"></p>
<p>点击<a href="https://inmb.lanzouf.com/i9Sm103c05pg">下载附件</a>，解压得到一个勒索文件，一个加密文件</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2022/04/17/981e57f18b0598de.png"></p>
<p>由于，本人目前能力有限，毕竟专业领域有人做的比我们好，所以我们使用360勒索病毒解密：<a href="https://lesuobingdu.360.cn/">https://lesuobingdu.360.cn/</a></p>
<p>选择在线解密，上传留言文件和加密文件，点击开始解密，稍等片刻后就可以下载到含有flag的源文件</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220417030409531.png" alt="解密"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;fngD_vwfW_JTqI_E4Kl&#125;</span><br></pre></td></tr></table></figure>





<h2 id="》CRYPTO"><a href="#》CRYPTO" class="headerlink" title="》CRYPTO"></a>》CRYPTO</h2><h3 id="hex"><a href="#hex" class="headerlink" title="hex"></a>hex</h3><p><img data-src="https://img.i-nmb.cn/inmb/image-20220417030827940.png" alt="hex"></p>
<p>点击<a href="https://inmb.lanzouf.com/iLsOa03c11wf">这里下载附件</a>，解压得到mod.txt给了一串字符串解密得到答案;</p>
<p>分析字符串可以得到是16进制，<strong>因为16进制的组成字母范围是 a-f</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0fbb9e1e6b3e3b9e4b3b7b7e2b6b1e4b2b6b9e2b1b1b3b3b7e6b3b3b0e3b9b3b5e6fd</span><br></pre></td></tr></table></figure>

<p><img data-src="https://img.i-nmb.cn/inmb/image-20220417031042116.png" alt="image-20220417031042116"></p>
<p>把其转成ASC码即可,但是往往不是那么顺利,因为存在 ASC码超过最大值的问题,需要减<strong>128</strong>,再转ASC码;</p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220417031551253.png" alt="p" style="zoom:80%;" />

<p>脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cipher = <span class="string">&quot;d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0fbb9e1e6b3e3b9e4b3b7b7e2b6b1e4b2b6b9e2b1b1b3b3b7e6b3b3b0e3b9b3b5e6fd&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(cipher[i:i + <span class="number">2</span>], <span class="number">16</span>) - <span class="number">128</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(cipher), <span class="number">2</span>)]))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>得到flag{9af3c9d377b61d269b11337f330c935f}</p>
<h2 id="》REVERSE"><a href="#》REVERSE" class="headerlink" title="》REVERSE"></a>》REVERSE</h2><h3 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h3><p><img data-src="https://img.i-nmb.cn/inmb/image-20220417031912025.png" alt="题目"></p>
<p>点击<a href="https://inmb.lanzouf.com/i6OdD03c14ne">这里下载附件包</a>，得到某个文件，二话不说放进IDA，因为是64位文件，<strong>使用IDA64打开</strong>。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220417032033287.png" alt="image-20220417032033287"></p>
<p>找到main函数</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220417032224390.png" alt="main函数"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s2[<span class="number">8</span>]; <span class="comment">// [rsp+0h] [rbp-40h]</span></span><br><span class="line">  <span class="type">char</span> s1; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;plz input flag:&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(s2, <span class="string">&quot;Reverse_is_very_Fun-_-!&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, &amp;s1);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;s1, s2) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;right!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;wrong!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里将”Reverse_is_very_Fun-_-!”复制到数组s2中，并将s2和输入的s1进行对比，如果s1和s2相同则输出”right!”否则输出”wrong!”</p>
<p>所以，flag就是Reverse_is_very_Fun-_-!</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;Reverse_is_very_Fun-_-!&#125;</span><br></pre></td></tr></table></figure>





<p>附：<a href="https://inmb.lanzouf.com/i3uYK03m622b">信息工程学院网络攻防大赛初赛官方解题报告.pdf</a></p>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>在NexT的侧边栏添加近期文章板块</title>
    <url>/Recent-articles.html</url>
    <content><![CDATA[<p>最近听说内链可以改善SEO，于是乎，我想在NexT的侧边栏添加近期文章板块</p>
<p>在网络上查找的方案大致如下</p>
<h2 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&#123;<span class="operator">%</span> <span class="keyword">if</span> theme.recent_posts <span class="operator">%</span>&#125;</span><br><span class="line">    <span class="operator">&lt;</span>div <span class="keyword">class</span>=&quot;<span class="title class_">links</span>-<span class="title class_">of</span>-<span class="title class_">blogroll</span> <span class="title class_">motion</span>-<span class="title class_">element</span> &#123;&#123; <span class="string">&quot;links-of-blogroll-&quot;</span> <span class="operator">+</span> theme.recent_posts_layout  &#125;&#125;<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;div class=&quot;</span>links<span class="operator">-</span>of<span class="operator">-</span>blogroll<span class="operator">-</span>title<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;!-- modify icon to fire by szw --&gt;</span></span><br><span class="line"><span class="string">        &lt;i class=&quot;</span>fa fa<span class="operator">-</span>history fa<span class="operator">-</span>&#123;&#123; theme.recent_posts_icon <span class="operator">|</span> lower &#125;&#125;<span class="string">&quot; aria-hidden=&quot;</span><span class="literal">true</span><span class="string">&quot;&gt;&lt;/i&gt;</span></span><br><span class="line"><span class="string">        &#123;&#123; theme.recent_posts_title &#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;ul class=&quot;</span>links<span class="operator">-</span>of<span class="operator">-</span>blogroll<span class="operator">-</span>list<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">        &#123;% set posts = site.posts.sort(&#x27;-date&#x27;) %&#125;</span></span><br><span class="line"><span class="string">        &#123;% for post in posts.slice(&#x27;0&#x27;, &#x27;5&#x27;) %&#125;</span></span><br><span class="line"><span class="string">          &lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;a href=&quot;</span>&#123;&#123; url_for(post.path) &#125;&#125;<span class="string">&quot; title=&quot;</span>&#123;&#123; post.title &#125;&#125;<span class="string">&quot; target=&quot;</span>_blank<span class="string">&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt;</span></span><br><span class="line"><span class="string">          &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &#123;% endfor %&#125;</span></span><br><span class="line"><span class="string">      &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>

<p>将此代码贴在<code>next/layout/macro/sidebar.swig</code>中的<code>if theme.links</code>对应的<code>endif</code>后面<br>为了配置方便，在主题的<code>config.yml</code>中添加了几个变量，如下：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">recent_posts_title: 近期文章</span><br><span class="line">recent_posts_layout: block</span><br><span class="line">recent_posts: <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<p>以上操作之后NexT 7.8.0在侧边栏有“近期文章”的文字标志。但是没有链接。</p>
<p>于是我换了另外一种办法，基于NexT 8.X</p>
<h2 id="第二种办法"><a href="#第二种办法" class="headerlink" title="第二种办法"></a>第二种办法</h2><ol>
<li>新建 source&#x2F;_data&#x2F;sidebar.njk 文件，内容如下：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="comment"># RecentPosts #&#125;</span></span><br><span class="line">&#123;%- <span class="keyword">if</span> theme.recent_posts %&#125;</span><br><span class="line">  &lt;div class=<span class="string">&quot;links-of-recent-posts motion-element&quot;</span>&gt;</span><br><span class="line">    &lt;div class=<span class="string">&quot;links-of-recent-posts-title&quot;</span>&gt;</span><br><span class="line">      &#123;%- <span class="keyword">if</span> theme.recent_posts.icon %&#125;</span><br><span class="line">      &lt;i class=<span class="string">&quot;&#123;&#123; theme.recent_posts.icon &#125;&#125; fa-fw&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line">      &#123;&#123; theme.recent_posts.title &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;ul class=<span class="string">&quot;links-of-recent-posts-list&quot;</span>&gt;</span><br><span class="line">      &#123;%- <span class="built_in">set</span> posts = site.posts.sort(<span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>).toArray() %&#125;</span><br><span class="line">      &#123;%- <span class="keyword">for</span> post <span class="keyword">in</span> posts.slice(<span class="string">&#x27;0&#x27;</span>, theme.recent_posts.max_count) %&#125;</span><br><span class="line">        &lt;li class=<span class="string">&quot;links-of-recent-posts-item&quot;</span>&gt;</span><br><span class="line">          &#123;&#123; next_url(post.path, post.title, &#123;title: post.path&#125;) &#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &#123;%- endfor %&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>

<p>2.修改config.next.yml，取消 custom_file_path 中的 sidebar 和 style 两个注释，并新增 recent_posts 内容。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="string">source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br><span class="line"></span><br><span class="line"><span class="attr">recent_posts:</span></span><br><span class="line"><span class="comment"># 块标题</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">最近文章</span></span><br><span class="line"><span class="comment"># 图标</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-history</span></span><br><span class="line"><span class="comment"># 最多多少文章链接</span></span><br><span class="line">  <span class="attr">max_count:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>3.修改 source&#x2F;_data&#x2F;styles.styl 文件，文件不存在新建即可。添加如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 近期文章</span><br><span class="line"><span class="selector-class">.links-of-recent-posts</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.8125em</span></span><br><span class="line">  margin-top: <span class="number">10px</span></span><br><span class="line"></span><br><span class="line">.links-of-recent-posts-title</span><br><span class="line">  font-size: <span class="number">1.03em</span></span><br><span class="line">  font-weight: <span class="number">600</span></span><br><span class="line">  margin-top: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">.links-of-recent-posts-list</span><br><span class="line">  list-style: none</span><br><span class="line">  margin: <span class="number">0</span></span><br><span class="line">  padding: <span class="number">0</span></span><br></pre></td></tr></table></figure>



<p>然后发现这个只在站点概括中，在文章目录中不存在</p>
<img data-src="https://inmb.oss-cn-shenzhen.aliyuncs.com/inmb/image-20220503170621133.png" alt="只在站点概括中" style="zoom:50%;" />

<img data-src="https://inmb.oss-cn-shenzhen.aliyuncs.com/inmb/image-20220503170947135.png" alt="在文章目录中没有显示" style="zoom:60%;" />

<p>因为大多数访客是不会主动点击站点概括的，那么如何把近期文章板块加入到文章目录的侧边栏中去呢？</p>
<p>我结合了第一种方法</p>
<p>因为第一种办法，能够在目录中显示近期文章四个字，那么说明第一种方法可行，但是可能已经过时或者是笔者配置不正确。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>把上面新建的<code>sidebar.njk</code>代码复制在<code>next/layout/_macro/sidebar.swig</code>中的适应位置，如果没有修改添加过其他板块，可以在<code>&#123;%- if theme.back2top.enable and theme.back2top.sidebar %&#125;</code>的前面粘贴</p>
<p>因为本博客添加了tag云，所以笔者放在了&#96;</p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-NexT主题加速运行</title>
    <url>/acceleration.html</url>
    <content><![CDATA[<h2 id="删繁就简"><a href="#删繁就简" class="headerlink" title="删繁就简"></a>删繁就简</h2><p>去掉一些不必要的、花里胡哨的功能，这个可能要关掉pace、canvas_lines、tag-icon等，安心留田种地。</p>
<h2 id="使用CDN加载部分css、js"><a href="#使用CDN加载部分css、js" class="headerlink" title="使用CDN加载部分css、js"></a>使用CDN加载部分css、js</h2><p>当我使用FancyBox进行图片放大的时候，每次在F12中看到FancyBox的加载速度十分缓慢，因为他都要调用托管地方的文件，这时候可能需要引用外部响应速度（下载速度）比我们自己站点更好的，而jsdelivr就可以完美解决这一问题</p>
<p>在<code>Blog/themes/next/_config.yml</code>中搜索<code>jsdelivr</code>，让这些外部资源加载使用jsDeliver</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220419180337404.png" alt="image-20220419180337404"></p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220419180547954.png" alt="例如" style="zoom:67%;" />

<h2 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h2><p>下列是对一些在_config.yml配置中提供CDN加载的插件介绍，如果你使用或者需要这些插件你可以直接把他前面的 # 删去即可使用，不必再将他下载到本地再上传并且不必让他在自己的站中缓慢加载、消耗流量。</p>
<h3 id="anime："><a href="#anime：" class="headerlink" title="anime："></a>anime：</h3><p>anime.js 是一个简便的JS动画库，用法简单而且适用范围广，涵盖CSS，DOM，SVG还有JS的对象，各种带数值属性的东西都可以动起来。</p>
<p>实际演示和代码，官网写得很详细清楚了</p>
<p>官网：<a href="https://www.animejs.cn/documentation/#remove">中文文档 | anime.js (animejs.cn)</a></p>
<h3 id="fontawesome："><a href="#fontawesome：" class="headerlink" title="fontawesome："></a>fontawesome：</h3><p><a href="http://www.baidu.com/link?url=0KewDfaGONrnAvIw-Pge0uEsjHWhiV8cB0vKPwhlN-VJa1NkcBKorHbZQauXaZLZ">Font Awesome,一套绝佳的图标字体库和CSS框架</a></p>
<h3 id="MathJax："><a href="#MathJax：" class="headerlink" title="MathJax："></a>MathJax：</h3><p>在页面有很多情况需要显示公式，但在单纯在页面显示是不能达到效果的，因此需要MathJax的编译。</p>
<h3 id="KaTeX"><a href="#KaTeX" class="headerlink" title="KaTeX"></a>KaTeX</h3><p>通过KaTeX插件，您可以在网站上使用最快的<a href="https://github.com/Khan/KaTeX">TeX数学排版引擎</a></p>
<h3 id="pjax"><a href="#pjax" class="headerlink" title="pjax"></a>pjax</h3><p>pjax是一个jQuery插件，它通过ajax和pushState技术提供了极速的（无刷新ajax加载）浏览体验，并且保持了真实的地址、网页标题，浏览器的后退（前进）按钮也可以正常使用。</p>
<p>pjax的工作原理是通过ajax从服务器端获取HTML，在页面中用获取到的HTML替换指定容器元素中的内容。然后使用pushState技术更新浏览器地址栏中的当前地址。</p>
<p>以下两点原因决定了pjax会有更快的浏览体验：</p>
<p>1.不存在页面资源（js&#x2F;css）的重复加载和应用；</p>
<p>2.如果服务器端配置了pjax，它可以只渲染页面局部内容，从而避免服务器渲染完整布局的额外开销。</p>
<h4 id="建议开启pjax"><a href="#建议开启pjax" class="headerlink" title="建议开启pjax"></a>建议开启pjax</h4><p>使用<em>pjax</em> 实现网站无刷新加载</p>
<h4 id="开启pjax"><a href="#开启pjax" class="headerlink" title="开启pjax"></a>开启pjax</h4><p>pjax的开启很简单，我们只需要用CDN加载pjax（去掉链接前面的#，并且在原pjax前加上#，如下图），然后在主题配置中找到pjax设置<code>pjax: true</code>。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220419182954415.png" alt="image-20220419182954415"></p>
<p>使用pjax，你甚至可以给<a href="https://blog.csdn.net/Qxiaofei_/article/details/123072610">Next主题添加全局播放翻页不间断的网易云音乐</a>；</p>
<h3 id="FancyBox"><a href="#FancyBox" class="headerlink" title="FancyBox"></a>FancyBox</h3><p>支持对放大的图片添加阴影效果，对于一组相关的图片添加导航操作按纽。</p>
<h3 id="Medium-zoom"><a href="#Medium-zoom" class="headerlink" title="Medium-zoom"></a>Medium-zoom</h3><p>想为自己网站的文章图片添加缩放的效果,可以选择使用<em>medium-zoom</em>这个插件</p>
<h3 id="Lazy-Load"><a href="#Lazy-Load" class="headerlink" title="Lazy Load"></a>Lazy Load</h3><p>Lazy Load延迟加载图像插件,直到用户滚动到它们才显示!</p>
<p>lazyload 是网站常用的技术，通过按需加载，避免一次性加载过多内容导致的打开缓慢</p>
<h3 id="Pangu"><a href="#Pangu" class="headerlink" title="Pangu"></a>Pangu</h3><p>对于强迫症来说，中英文混排时加上空格能很大程度改善阅读体验，但是有时候会不小心打漏部分空格，而 <a href="https://github.com/vinta/pangu.js">pangu</a> 这个项目就可以帮你在展示时自动加上空格</p>
<h3 id="Quicklink"><a href="#Quicklink" class="headerlink" title="Quicklink"></a>Quicklink</h3><p>可以在空闲时间预获取页面可视区域（以下简称视区）内的链接，加快后续加载速度。</p>
<h3 id="DisqusJS"><a href="#DisqusJS" class="headerlink" title="DisqusJS"></a>DisqusJS</h3><p><em>DisqusJS</em>:使用DisqusAPI在中国大陆呈现Disqus评论</p>
<h3 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a>Valine</h3><p>Valine - 一款快速、简洁且高效的无后端评论系统。</p>
<h3 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h3><p> Gitalk 是一个基于 GitHub Issue 和 Preact 开发的评论插件</p>
<h3 id="Algolia-Search"><a href="#Algolia-Search" class="headerlink" title="Algolia Search"></a>Algolia Search</h3><p>Algolia 搜索插件，懂的都懂</p>
<h3 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h3><p>绘图插件–mermaid</p>
<h3 id="Velocity"><a href="#Velocity" class="headerlink" title="Velocity"></a>Velocity</h3><h3 id="Pace"><a href="#Pace" class="headerlink" title="Pace"></a>Pace</h3><p>通过使用pace,我们可以展示网页进度条加载效果。</p>
<h3 id="canvas-ribbon"><a href="#canvas-ribbon" class="headerlink" title="canvas_ribbon"></a>canvas_ribbon</h3><p>背景彩带动画</p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 数组—JAVA语言基础</title>
    <url>/array.html</url>
    <content><![CDATA[<p>通过阅读本篇，您可以：</p>
<p>掌握一维数组的创建和使用方法</p>
<p>掌握二维数组的创建和使用方法</p>
<p>了解如何遍历数组</p>
<p>了解如何填充替换数组中的元素</p>
<p>了解如何对数组进行排序</p>
<p>了解如何复制数组</p>
<p>了解查询数组的方法</p>
<h2 id="数组概述"><a href="#数组概述" class="headerlink" title="数组概述"></a>数组概述</h2><p>数组是具有相同数据类型的一组数据的集合。数组中的每个元素具有相同的数据类型。</p>
<p>在Java中同样将数组看作一个对象，虽然基本数据类型不是对象，但由基本数据类型组成的数组却是对象。</p>
<h2 id="一维数组的创建及使用"><a href="#一维数组的创建及使用" class="headerlink" title="一维数组的创建及使用"></a>一维数组的创建及使用</h2><p>一维数组实质上是一组相同类型数据的线性集合，当在程序中需要处理一组数据，或者传递一组数据时，可以应用这种类型的数组。</p>
<h3 id="创建一维数组"><a href="#创建一维数组" class="headerlink" title="创建一维数组"></a>创建一维数组</h3><p>数组作为对象允许使用new关键字进行内存分配。在使用数组之前，必须首先定义数组变量所属的类型。一维数组的创建有两种形式。</p>
<h4 id="先声明，再用new运算符进行内存分配"><a href="#先声明，再用new运算符进行内存分配" class="headerlink" title="先声明，再用new运算符进行内存分配"></a>先声明，再用<strong>new</strong>运算符进行内存分配</h4><p>声明一维数组有下列两种方式：</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424105130326.png" alt="声明一维数组"></p>
<p>数组元素类型决定了数组的数据类型。</p>
<p>它可以是Java中任意的数据类型，包括简单类型和组合类型。数组名字为一个合法的标识符，符号“[ ]”指明该变量是一个数组类型变量。单个“[ ]”表示要创建的数组是一个一维数组。</p>
<p>声明一维数组，实例代码</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424105241086.png" alt="声明一维数组，实例代码"></p>
<p>声明数组后，还不能立即访问它的任何元素，因为声明数组只是给出了数组名字和元素的数据类型</p>
<p>要想真正使用数组，还要为它分配内存空间。在为数组分配内存空间时必须指明数组的长度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数组名字 = <span class="keyword">new</span> 数组元素的类型[数组元素的个数];</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<h4 id="声明的同时为数组分配内存"><a href="#声明的同时为数组分配内存" class="headerlink" title="声明的同时为数组分配内存"></a>声明的同时为数组分配内存</h4><p>这种创建数组的方法是将数组的声明和内存的分配合在一起执行。</p>
<blockquote>
<p>数组元素的类型 数组名 &#x3D; new数组元素的类型[数组元素的个数];</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> month[ ] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">12</span>]</span><br></pre></td></tr></table></figure>

<p>上面的代码创建数组month，并指定了数组长度为12。这种创建数组的方法也是Java程序编写过程中普遍的做法。</p>
<h3 id="初始化一维数组"><a href="#初始化一维数组" class="headerlink" title="初始化一维数组"></a>初始化一维数组</h3><p>数组与基本数据类型一样可以进行初始化操作。</p>
<p>数组的初始化可分别初始化数组中的每个元素。</p>
<p>数组的初始化有以下两种形式：</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424105806481.png" alt="数组的初始化"></p>
<p>从中可以看出，数组的初始化就是包括在大括号之内用逗号分开的表达式列表。</p>
<h3 id="使用一维数组"><a href="#使用一维数组" class="headerlink" title="使用一维数组"></a>使用一维数组</h3><p>在Java集合中一维数组是常见的一种数据结构。下面的实例是使用一维数组将1～12月各月的天数输出。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424105929192.png" alt="在项目中创建类GetDay，在主方法中创建int型数组，并实现将各月的天数输出。"></p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424105945335.png" alt="结果"></p>
<h2 id="二维数组的创建及使用"><a href="#二维数组的创建及使用" class="headerlink" title="二维数组的创建及使用"></a>二维数组的创建及使用</h2><p>如果一维数组中的各个元素仍然是一个数组，那么它就是一个二维数组。</p>
<h3 id="二维数组的创建"><a href="#二维数组的创建" class="headerlink" title="二维数组的创建"></a>二维数组的创建</h3><p>二维数组可以看作是特殊的一维数组，因此，二维数组的创建同样有两种方式。</p>
<h4 id="先声明，再用new运算符进行内存分配-1"><a href="#先声明，再用new运算符进行内存分配-1" class="headerlink" title="先声明，再用new运算符进行内存分配"></a>先声明，再用new运算符进行内存分配</h4><p>声明二维数组的语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数组元素的类型 数组名字[ ][ ];</span><br><span class="line"></span><br><span class="line">数组元素的类型[ ][ ] 数组名字;</span><br></pre></td></tr></table></figure>

<p>例如：<code>int myarr[][];</code></p>
<p>同一维数组一样，二维数组在声明时也没有分配内存空间，同样要使用new关键字来分配内存，然后才可以访问每个元素。</p>
<p>对于高维数组，有两种为数组分配内存的方式：</p>
<h5 id="（1）-直接为每一维分配内存空间"><a href="#（1）-直接为每一维分配内存空间" class="headerlink" title="（1） 直接为每一维分配内存空间"></a>（1） 直接为每一维分配内存空间</h5><p>为每一维数组分配内存，实例代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">4</span>]</span><br></pre></td></tr></table></figure>

<p>上述代码创建了二维数组a，二维数组a中包括两个长度为4的一维数组</p>
<h5 id="（2）-分别为每一维分配内存"><a href="#（2）-分别为每一维分配内存" class="headerlink" title="（2） 分别为每一维分配内存"></a>（2） 分别为每一维分配内存</h5><p>分别为每一维分配内存，实例代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][];</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">a[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<h4 id="声明的同时为数组分配内存-1"><a href="#声明的同时为数组分配内存-1" class="headerlink" title="声明的同时为数组分配内存"></a>声明的同时为数组分配内存</h4><p>第二种方式同第一种实现的功能相同。使用这种方式为二维数组分配内存时，首先指定最左边维数的内存，然后单独地给余下的维数分配内存。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424110642079.png" alt="通过第二种方式为二维数组分配内存，如图"></p>
<h3 id="二维数组初始化"><a href="#二维数组初始化" class="headerlink" title="二维数组初始化"></a>二维数组初始化</h3><p>二维数组的初始化与一维数组初始化类似，同样可以使用大括号完成。</p>
<p>语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">type arrayname[][] = &#123;value1,value2…valuen&#125;;</span><br></pre></td></tr></table></figure>

<p>type：数组数据类型。</p>
<p>arrayname：数组名称，一个合法的标识符。</p>
<p>value：数组中各元素的值。</p>
<p>初始化二维数组，实例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> myarr[][] = &#123;&#123;<span class="number">12</span>,<span class="number">0</span>&#125;,&#123;<span class="number">45</span>,<span class="number">10</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>

<p>初始化二维数组后，要明确数组的下标都是从0开始。例如，上面的代码中myarr[1] [1]的值为10。</p>
<p>int型二维数组是以int a [][]来定义的，所以可以直接给a[x] [y]赋值。例如，给a[1]的第2个元素赋值的语句如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">20</span></span><br></pre></td></tr></table></figure>

<h3 id="使用二维数组"><a href="#使用二维数组" class="headerlink" title="使用二维数组"></a>使用二维数组</h3><p>二维数组在实际应用中用得非常广泛。</p>
<p>下面的实例就是使用二维数组输出一个3行4列且所有元素都是0的矩阵。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424111059355.png" alt="在项目中创建类Matrix，在主方法中编写代码实现输出一个3行4列且所有元素都为0的矩阵。"></p>
<p>运行结果如图</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424111117262.png" alt="运行结果"></p>
<h2 id="数组的基本操作"><a href="#数组的基本操作" class="headerlink" title="数组的基本操作"></a>数组的基本操作</h2><p>java.util包的Arrays类包含了用来操作数组（如排序和搜索）的各种方法，本节就将介绍数组的基本操作。</p>
<h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>遍历数组就是获取数组中的每个元素。通常遍历数组都是使用for循环来实现。遍历一维数组很简单，也很好理解，下面详细介绍遍历二维数组的方法。</p>
<p>遍历二维数组需使用双层for循环，通过数组的length属性可获得数组的长度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Trap</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> b[][] = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;b.length;k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> c=<span class="number">0</span>;c&lt;b[k].length;c++)&#123;</span><br><span class="line">                System.out.println(b[k][c]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如图</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424111809622.png" alt="运行结果"></p>
<p>在遍历数组时，使用foreach语句可能会更简单。下面的实例就是通过foreach语句遍历二维数组。</p>
<p>在项目中创建类Tautog，在主方法中定义二维数组，使用foreach语句遍历二维数组代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tautog</span>&#123;								</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> arr2[][] = &#123;&#123;<span class="number">4</span>,<span class="number">3</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>&#125;&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;数组中的元素是：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x[]:arr2)&#123;		<span class="comment">//外层循环变量为一维数组</span></span><br><span class="line">            i++;				<span class="comment">//外层计数器递增</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> e:x)&#123;		<span class="comment">//循环遍历每一个数组元素</span></span><br><span class="line">                j++;			<span class="comment">//内层计数器递增</span></span><br><span class="line">                <span class="keyword">if</span>(i == arr2.length &amp;&amp; j == x.length)&#123;		<span class="comment">//判断变量是二维数组的最后一个元素</span></span><br><span class="line">                    System.out.print(e);					<span class="comment">//输出二维数组最后一个元素</span></span><br><span class="line">                &#125;<span class="keyword">else</span></span><br><span class="line">                    System.out.print(e + <span class="string">&quot;、&quot;</span>)				<span class="comment">//如果不是最后个元素则输出e、</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424113100051.png" alt="运行结果"></p>
<h3 id="填充替换数组元素"><a href="#填充替换数组元素" class="headerlink" title="填充替换数组元素"></a>填充替换数组元素</h3><p>数组中的元素定义完成后，可通过Arrays类的静态方法fill()来对数组中的元素进行替换。</p>
<p>该方法通过各种重载形式可完成对任意类型的数组元素的替换。fill()方法有两种参数类型，下面以int型数组为例介绍fill()方法的使用方法。</p>
<h4 id="（1）-fill-int-a-int-value"><a href="#（1）-fill-int-a-int-value" class="headerlink" title="（1） fill(int[] a,int value)"></a>（1） fill(int[] a,int value)</h4><p>该方法可将指定的int值分配给int型数组的每个元素。</p>
<p>语法如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fill(<span class="type">int</span>[] a,<span class="type">int</span> value)</span><br></pre></td></tr></table></figure>

<p>a：要进行元素替换的数组。</p>
<p>value：要存储数组中所有元素的值。</p>
<p>在项目中创建类Swap，在主方法中创建一维数组，并实现通过fill()方法填充数组元素，最后将数组中的各个元素输出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swap</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] atgs)</span>&#123;</span><br><span class="line">        <span class="type">int</span> arr[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];				<span class="comment">//新建int型数组</span></span><br><span class="line">        Arrays.fill(arr,<span class="number">8</span>);					<span class="comment">//使用同一个值对数组进行填充</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;	<span class="comment">//循环遍历数组中的元素</span></span><br><span class="line">            <span class="comment">//将数组中的元素依次输出</span></span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;个元素是：&quot;</span> + arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424114555718.png" alt="运行结果"></p>
<h4 id="（2）-fill-int-a-int-fromIndex-int-toIndex-int-value"><a href="#（2）-fill-int-a-int-fromIndex-int-toIndex-int-value" class="headerlink" title="（2） fill(int[] a,int fromIndex,int toIndex,int value)"></a>（2） fill(int[] a,int fromIndex,int toIndex,int value)</h4><p>该方法将指定的int值分配给int型数组指定范围中的每个元素。填充的范围从索引fromIndex（包括）一直到索引toIndex（不包括）。如果fromIndex &#x3D;&#x3D; toIndex，则填充范围为空。</p>
<p>语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fill(<span class="type">int</span>[] a,<span class="type">int</span> fromIndex,<span class="type">int</span> toIndex,<span class="type">int</span> value)</span><br></pre></td></tr></table></figure>

<p>a：要进行填充的数组。</p>
<p>fromIndex：要使用指定值填充的第一个元素的索引（包括）。</p>
<p>toIndex：要使用指定值填充的最后一个元素的索引（不包括）。</p>
<p>value：要存储在数组所有元素中的值。</p>
<p>下实例我们通过 Java Util 类的 Arrays.fill(arrayname,value) 方法和Arrays.fill(arrayname ,starting index ,ending index ,value) 方法向数组中填充元素：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FillTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> array[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>];</span><br><span class="line">        Arrays.fill(array, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>, n=array.length; i &lt; n; i++) &#123;</span><br><span class="line">            System.out.println(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        Arrays.fill(array, <span class="number">3</span>, <span class="number">6</span>, <span class="number">50</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>, n=array.length; i&lt; n; i++) &#123;</span><br><span class="line">            System.out.println(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码运行输出结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">100</span><br><span class="line">100</span><br><span class="line">100</span><br><span class="line">100</span><br><span class="line">100</span><br><span class="line">100</span><br><span class="line"></span><br><span class="line">100</span><br><span class="line">100</span><br><span class="line">100</span><br><span class="line">50</span><br><span class="line">50</span><br><span class="line">50</span><br></pre></td></tr></table></figure>

<h3 id="对数组进行排序"><a href="#对数组进行排序" class="headerlink" title="对数组进行排序"></a>对数组进行排序</h3><p>通过Arrays类的静态sort()方法可以实现对数组的排序。sort()方法提供了多种重载形式，可对任意类型的数组进行升序排序。</p>
<p>语法如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(object)</span><br></pre></td></tr></table></figure>

<p>其中，object是指进行排序的数组名称</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424115317314.png" alt="在项目中创建类Taxis，在主方法中创建一维数组，将数组排序后输出。"></p>
<p>运行结果如图</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424115332551.png" alt="运行结果"></p>
<p>上述实例是对整型数组进行排序。Java中的String类型数组的排序算法是根据字典编排顺序排序的，因此数字排在字母前面，大写字母排在小写字母前面。</p>
<h3 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h3><p>Arrays类的copyOf()方法与copyOfRange()方法可以实现对数组的复制。copyOf()方法是复制数组至指定长度，copyOfRange()方法则将指定数组的指定长度复制到一个新数组中。</p>
<h4 id="（1）-copyOf-方法"><a href="#（1）-copyOf-方法" class="headerlink" title="（1） copyOf()方法"></a>（1） copyOf()方法</h4><p>该方法提供了多种重载形式，用于满足不同类型数组的复制。语法如下</p>
<p>  <img data-src="https://img.i-nmb.cn/inmb/wps2.png" alt="img"></p>
<p>arr：要进行复制的数组。</p>
<p>newlength：int型常量，指复制后的新数组的长度。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] a1 = Arrays.copyOf(a,<span class="number">2</span>);<span class="comment">//复制指定的数组长度</span></span><br><span class="line"><span class="type">int</span>[] a2 = Arrays.copyOf(a,<span class="number">3</span>);</span><br><span class="line"><span class="type">int</span>[] a3 = Arrays.copyOf(a,<span class="number">5</span>);</span><br><span class="line">System.out.println(Arrays.toString(a1));</span><br><span class="line">System.out.println(Arrays.toString(a2));</span><br><span class="line">System.out.println(Arrays.toString(a3));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1, 2] [1, 2, 3] [1, 2, 3, 4, 0]</span><br></pre></td></tr></table></figure>



<h4 id="（2）-copyOfRange-方法"><a href="#（2）-copyOfRange-方法" class="headerlink" title="（2） copyOfRange()方法"></a>（2） copyOfRange()方法</h4><p>该方法同样提供了多种重载形式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copyOfRange(arr,int formIndex,int toIndex)</span><br></pre></td></tr></table></figure>

<p>arr：要进行复制的数组对象。 </p>
<p>formIndex：指定开始复制数组的索引位置。formIndex必须在0至整个数组的长度之间。新数组包括索引是formIndex的元素。</p>
<p>toIndex：要复制范围的最后索引位置。可大于数组arr的长度。新数组不包括索引是toIndex的元素。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424120338695.png" alt="在项目中创建类Repeat，在主方法中创建一维数组，并将数组中索引位置是0~3的元素复制到新数组中，最后将新数组输出。"></p>
<p>运行结果如图</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424120355348.png" alt="运行结果"></p>
<h3 id="数组查询"><a href="#数组查询" class="headerlink" title="数组查询"></a>数组查询</h3><p>Arrays类的binarySearch()方法，可使用二分搜索法来搜索指定数 组，以获得指定对象。该方法返回要搜索元素的索引值。binarySearch() 方法提供了多种重载形式，用于满足各种类型数组的查找需要。binarySearch()方法有两种参数类型。</p>
<h4 id="（1）-binarySearch-Object-Object-key"><a href="#（1）-binarySearch-Object-Object-key" class="headerlink" title="（1） binarySearch(Object[],Object key)"></a>（1） binarySearch(Object[],Object key)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">binarySearch(Object[] a, Object key)</span><br></pre></td></tr></table></figure>

<p>a: 要搜索的数组</p>
<p>key：要搜索的值</p>
<p>如果key在数组中，则返回搜索值的索引；否则返回-1或“-”（插入点）。插入点是索引键将要插入数组的那一点，即第一个大于该键的元素的索引。</p>
<p>技巧：</p>
<p>[1] 搜索值不是数组元素，且在数组范围内，从1开始计数，得“ - 插入点索引值”；</p>
<p>[2] 搜索值是数组元素，从0开始计数，得搜索值的索引值；</p>
<p>[3] 搜索值不是数组元素，且小于数组内元素，索引值为 – 1；</p>
<p>[4] 搜索值不是数组元素，且大于数组内元素，索引值为 – (length + 1);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArraysBinarySearch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>&#125;;</span><br><span class="line"> </span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数字【&quot;</span> + i + <span class="string">&quot;】：&quot;</span> + Arrays.binarySearch(arr, i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数字【<span class="number">0</span>】：-<span class="number">1</span></span><br><span class="line">数字【<span class="number">1</span>】：-<span class="number">1</span></span><br><span class="line">数字【<span class="number">2</span>】：-<span class="number">1</span></span><br><span class="line">数字【<span class="number">3</span>】：<span class="number">0</span></span><br><span class="line">数字【<span class="number">4</span>】：-<span class="number">2</span></span><br><span class="line">数字【<span class="number">5</span>】：<span class="number">1</span></span><br><span class="line">数字【<span class="number">6</span>】：-<span class="number">3</span></span><br><span class="line">数字【<span class="number">7</span>】：<span class="number">2</span></span><br><span class="line">数字【<span class="number">8</span>】：-<span class="number">4</span></span><br><span class="line">数字【<span class="number">9</span>】：<span class="number">3</span></span><br><span class="line">数字【<span class="number">10</span>】：-<span class="number">5</span></span><br><span class="line">数字【<span class="number">11</span>】：<span class="number">4</span></span><br><span class="line">数字【<span class="number">12</span>】：-<span class="number">6</span></span><br><span class="line">数字【<span class="number">13</span>】：<span class="number">5</span></span><br><span class="line">数字【<span class="number">14</span>】：-<span class="number">7</span></span><br><span class="line">数字【<span class="number">15</span>】：-<span class="number">7</span></span><br><span class="line">数字【<span class="number">16</span>】：-<span class="number">7</span></span><br></pre></td></tr></table></figure>



<h4 id="（2）-binarySearch-Object-int-fromIndex-int-toIndex-Object-key"><a href="#（2）-binarySearch-Object-int-fromIndex-int-toIndex-Object-key" class="headerlink" title="（2） binarySearch(Object[],int fromIndex,int toIndex,Object key)"></a>（2） binarySearch(Object[],int fromIndex,int toIndex,Object key)</h4><p>该方法在指定的范围内检索某一元素。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/wps4.png" alt="img"></p>
<p>a：要进行检索的数组。</p>
<p>fromIndex：指定范围的开始处索引（包含）。</p>
<p>toIndex：指定范围的结束处索引（不包含）。</p>
<p>key：要搜索的元素。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424121753928.png" alt="在项目中创建类Rakel，在主方法中创建String数组，实现查找元素“cd”在指定范围的数组str中的索引位置。"></p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424121804351.png" alt="运行结果"></p>
]]></content>
      <tags>
        <tag>Eclipse</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT主题修改侧边滚动条</title>
    <url>/scrollbar.html</url>
    <content><![CDATA[<h2 id="NexT主题修改侧边栏"><a href="#NexT主题修改侧边栏" class="headerlink" title="NexT主题修改侧边栏"></a>NexT主题修改侧边栏</h2><p>在<code>(root)\themes\next\source\css</code>找到<code>_other.styl</code>，没有就自建。</p>
<p>增添以下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#FF2A68</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(<span class="number">45deg</span>,<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">4</span>) <span class="number">25%</span>,transparent <span class="number">25%</span>,transparent <span class="number">50%</span>,<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">4</span>) <span class="number">50%</span>,<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">4</span>) <span class="number">75%</span>,transparent <span class="number">75%</span>,transparent);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3em</span>;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffcacaff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3em</span>;</span><br><span class="line">&#125;</span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://inmb.oss-cn-shenzhen.aliyuncs.com/inmb/image-20220429102531954.png" alt="样式"></p>
<p>若发现配色不适合网页，例如：</p>
<p><img data-src="https://inmb.oss-cn-shenzhen.aliyuncs.com/inmb/image-20220429102621241.png" alt="配色不适合"></p>
<p>可以去：<a href="http://tools.rockhwhuang.com/">在线调色助手配色参考(rockhwhuang.com)</a>，挑选自己喜欢的颜色，然后在<code>::-webkit-scrollbar-thumb&#123;background-color:&#125;</code>更改滚条颜色，在<code>::-webkit-scrollbar-track</code> 中的<code>background-color:</code>修改背景颜色</p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 字符串—JAVA语言基础</title>
    <url>/character-string.html</url>
    <content><![CDATA[<p>本篇从创建字符串开始向读者介绍字符串本身的特性，以及字符串上可用的几个操作等。</p>
<p>通过阅读本章，您可以：</p>
<p>​	掌握字符串的创建方式</p>
<p>​	理解字符串连接的方式</p>
<p>​	掌握获取字符串信息的方式</p>
<p>​	掌握字符串的常用操作 </p>
<p>​	掌握字符串的格式化方法</p>
<p>​	理解正则表达式</p>
<p>​	掌握字符串生成器的用法</p>
<h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><p>前面的章节中介绍了char类型，它只能表示单个字符，不能表示由多个字符连接而成的字符串。</p>
<p>在Java语言中将字符串作为对象来处理， 可以通过java.lang包中的String类来创建字符串对象</p>
<h3 id="声明字符串"><a href="#声明字符串" class="headerlink" title="声明字符串"></a>声明字符串</h3><p>在Java语言中字符串必须包含在一对双引号（” “）之内。</p>
<p>如：<code>&quot;23.23&quot;、&quot;ABCDE&quot;、&quot;你好&quot;</code></p>
<p>可以通过以下语法格式来声明字符串变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str ;</span><br></pre></td></tr></table></figure>

<p>String：指定该变量为字符串类型。</p>
<p>str：任意有效的标识符，表示字符串变量的名称。</p>
<blockquote>
<p>声明字符串变量必须经过初始化才能使用，否则编译器会报出“变量未被初始化错误”。</p>
</blockquote>
<h3 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h3><p>String类的常用构造方法如下：</p>
<p>（1） String(char a[])</p>
<p>用一个字符数组a创建String对象，实例代码如下：</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423235011146.png" alt="image-20220423235011146"></p>
<p>（2） String(char a[], int offset, int length)</p>
<p>提取字符数组a中的一部分创建一个字符串对象。参数offset表示开始截取字符串的位置，length表示截取字符串的长度。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220423235304336.png" alt="image-20220423235304336"></p>
<p>除通过以上几种使用String类的构造方法来创建字符串变量外，还可通过字符串常量的引用赋值给一个字符串变量。</p>
<p><u>引用字符串常量来创建字符串变量，实例代码如下</u></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1,str2;</span><br><span class="line">str1 = <span class="string">&quot;We are students&quot;</span> srt2 = <span class="string">&quot;We are students&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h2><p>对于已声明的字符串，可以对其进行相应的操作。连接字符串就是字符操作中较简单的一种。</p>
<h3 id="连接多个字符串"><a href="#连接多个字符串" class="headerlink" title="连接多个字符串"></a>连接多个字符串</h3><p>使用“+”运算符可实现连接多个字符串的功能。“+”运算符可以连接多个运算符并产生一个String对象。</p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220424000452690.png" alt="在项目中创建类Join，在主方法中创建String型变量，并将字符变量连接的结果输出" style="zoom:120%;" />

<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424000502955.png" alt="结果"></p>
<blockquote>
<p>Java中一句相连的字符串不能分开在两行中写。例如，下列语句的写法就是错误的。</p>
<p>System.out.println(“I like Java”)</p>
<p>如果一个字符串太长，为了便于阅读，必须将这个字符串分在两行上书写。则需要使用“+”将两个字符串连起来，之后在加号处换行。因此，上面的语句可以修改为：</p>
<p>System.out.println(“I like”+ “Java”);</p>
</blockquote>
<h3 id="连接其他数据类型"><a href="#连接其他数据类型" class="headerlink" title="连接其他数据类型"></a>连接其他数据类型</h3><p>字符串也可同其他基本数据类型进行连接。字符串同这些数据类型数据进行连接，会将这些数据直接转换成字符串</p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220424000629117.png" alt="在项目中创建类Link，在主方法中创建数值型变量，实现将字符串与整型、浮点型变量相连的结果输出" style="zoom:150%;" />

<p>本实例实现的是将字符串常量与整型变量booktime和浮点型变量practice相连后的结果输出。在这里booktime和practice都不是字符串，当它们与字符串相连时会自动调用toString()方法，将其转换成字符串形 式，然后参与连接。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424000647412.png" alt="结果"></p>
<h2 id="获取字符串信息"><a href="#获取字符串信息" class="headerlink" title="获取字符串信息"></a>获取字符串信息</h2><p>字符串作为对象，可通过相应方法获取字符串的有效信息，如获取某字符串的长度、某个索引位置的字符等。</p>
<h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><p>使用String类的length()方法可获取声明的字符串对象的长度。</p>
<p>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.length();</span><br></pre></td></tr></table></figure>

<p>其中，str为字符串对象</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;We are students&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> str.length();</span><br></pre></td></tr></table></figure>

<h3 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h3><p>String类提供了两种查找字符串的方法，即indexOf()与lastIndexOf()</p>
<p>（1） indexOf(String s)</p>
<p>该方法用于返回参数字符串s在指定字符串中首次出现的索引位</p>
<p>置。当调用字符串的indexOf()方法时，会从当前字符串的开始位置搜索</p>
<p>s的位置；如果没有检索到字符串s，该方法的返回值是-1。</p>
<p>语法如下：<code>str.indexOf(substr)</code></p>
<p>str：任意字符串对象。</p>
<p>substr：要搜索的字符串。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;We are students&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> str.indexOf(<span class="string">&quot;a&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>代码查找到a在字符串的位置（从0开始，直到3，所以size变量是3）</p>
<p>（1） lastIndexOf(String str)</p>
<p>该方法用于返回指定字符串最后一次出现的索引位置。当调用字符串的lastIndexOf()方法时，会从当前字符串的开始位置检索参数字符串str，并将最后一次出现str的索引位置返回。如果没有检索到字符串str，该方法返回-1。</p>
<p>语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str. lastIndexOf(substr)</span><br></pre></td></tr></table></figure>

<p>在项目中创建类Text，在主方法中创建String对象，使用lastIndexOf()方法查看字符串str中空字符串的位置，然后输出字符串的长度，看它们是否相同。</p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220424001425783.png" alt="实例" style="zoom:150%;" />

<p>结果：</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424001457672.png" alt="结果"></p>
<h3 id="获取指定索引位置的字符"><a href="#获取指定索引位置的字符" class="headerlink" title="获取指定索引位置的字符"></a>获取指定索引位置的字符</h3><p>使用charAt()方法可将指定索引处的字符返回。语法如下：</p>
<p><img data-src="https://img.i-nmb.cn/inmb/wps20.png" alt="img"></p>
<p>str：任意字符串</p>
<p>index：整型值，用于指定要返回字符的下标</p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220424001611351.png" alt="在项目中创建类Ref，在主方法中创建String对象，使用charAt()方法查看字符串str中索引位置是6的字符。" style="zoom:150%;" />

<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424001627942.png" alt="运行结果"></p>
<h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><p>String类中包含了很多方法，允许程序员对字符串进行操作来满足实际编程中的需要。</p>
<h3 id="获取子字符串"><a href="#获取子字符串" class="headerlink" title="获取子字符串"></a>获取子字符串</h3><p>通过String类的substring()方法可对字符串进行截取。这些方法的共同点就是都利用字符串的下标进行截取，且应明确字符串下标是从0开始的。</p>
<p>substring()方法被两种不同的方法重载，来满足不同的需要。</p>
<h4 id="（1）-substring-int-beginIndex"><a href="#（1）-substring-int-beginIndex" class="headerlink" title="（1） substring(int beginIndex)"></a>（1） substring(int beginIndex)</h4><p>该方法返回的是从指定的索引位置开始截取直到该字符串结尾的子串。</p>
<p>语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.substring(<span class="type">int</span> beginIndex)</span><br></pre></td></tr></table></figure>

<p>其中，beginIndex指定从某一索引处开始截取字符串</p>
<p>例如</p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220424001745519.png" alt="实例" style="zoom:150%;" />

<img data-src="https://img.i-nmb.cn/inmb/image-20220424001758591.png" alt="使用substring(beginIndex)截取字符串的过程" style="zoom:150%;" />



<p>ubstring() 方法返回字符串的子字符串。</p>
<h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public String substring(int beginIndex)</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">public String substring(int beginIndex, int endIndex)</span><br></pre></td></tr></table></figure>

<h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul>
<li><strong>beginIndex</strong> – 起始索引（包括）, 索引从 0 开始。</li>
<li><strong>endIndex</strong> – 结束索引（不包括）。</li>
</ul>
<p><img data-src="https://img.i-nmb.cn/inmb/java-substring-20201208.png" alt="img"></p>
<h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><p>子字符串。</p>
<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">Str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;This is text&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        System.out.print(<span class="string">&quot;返回值 :&quot;</span> );</span><br><span class="line">        System.out.println(Str.substring(<span class="number">4</span>) );</span><br><span class="line"> </span><br><span class="line">        System.out.print(<span class="string">&quot;返回值 :&quot;</span> );</span><br><span class="line">        System.out.println(Str.substring(<span class="number">4</span>, <span class="number">10</span>) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">返回值 : is text</span><br><span class="line">返回值 : is te</span><br></pre></td></tr></table></figure>





<h4 id="（2）-substring-int-beginIndex-int-endIndex"><a href="#（2）-substring-int-beginIndex-int-endIndex" class="headerlink" title="（2） substring(int beginIndex, int endIndex)"></a>（2） substring(int beginIndex, int endIndex)</h4><p>该方法返回的是从字符串某一索引位置开始截取至某一索引位置结束的子串。</p>
<p>语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">substring(<span class="type">int</span> beginIndex, <span class="type">int</span> endIndex)</span><br></pre></td></tr></table></figure>



<img data-src="https://img.i-nmb.cn/inmb/image-20220424001903645.png" alt="在项目中创建类Subs，在主方法中创建String对象，实现使用substring()方法对字符串进行截取，并将截取后形成的新串输出。" style="zoom:150%;" />

<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424001914462.png" alt="运行结果"></p>
<h3 id="去除空格"><a href="#去除空格" class="headerlink" title="去除空格"></a>去除空格</h3><p>trim()方法返回字符串的副本，忽略前导空格和尾部空格</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.trim()</span><br></pre></td></tr></table></figure>

<img data-src="https://img.i-nmb.cn/inmb/image-20220424002457196.png" alt="在项目中创建类Blak，在主方法中创建String对象，将字符变量原来的长度与去掉前导和尾部空格后的长度输出。" style="zoom:150%;" />

<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424002510820.png" alt="运行结果"></p>
<h3 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3><p>语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.replace(<span class="type">char</span> oldChar,<span class="type">char</span> newChar)</span><br></pre></td></tr></table></figure>

<p>oldChar：要替换的字符或字符串</p>
<p>newChar：用于替换原来字符串的内容</p>
<p>replace()方法返回的结果是一个新的字符串。如果字符串oldChar没有出现在该对象表达式中的字符串序列中，则将原字符串返回。</p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220424002614981.png" alt="在项目中创建类NewStr，在主方法中创建String型变量，将字符变量中的字母a替换成A后的结果输出。" style="zoom:150%;" />

<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424002625939.png" alt="运行结果"></p>
<h3 id="判断字符串的开始与结尾"><a href="#判断字符串的开始与结尾" class="headerlink" title="判断字符串的开始与结尾"></a>判断字符串的开始与结尾</h3><p>startsWith()方法与endsWith()方法分别用于判断字符串是否以指定的内容开始或结束。这两个方法的返回值都为boolean类型。</p>
<h4 id="（1）-startsWith-方法"><a href="#（1）-startsWith-方法" class="headerlink" title="（1） startsWith()方法"></a>（1） startsWith()方法</h4><p>该方法用于判断当前字符串对象的前缀是否为参数指定的字符串。</p>
<p>语法如下：</p>
<p><img data-src="https://img.i-nmb.cn/inmb/wps21.png"></p>
<h4 id="（2）-endsWith-方法"><a href="#（2）-endsWith-方法" class="headerlink" title="（2） endsWith()方法"></a>（2） endsWith()方法</h4><p>该方法用于判断当前字符串是否为以给定的子字符串结束。</p>
<p>语法如下：</p>
<p><img data-src="https://img.i-nmb.cn/inmb/wps22.png"></p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220424002836861.png" alt="在项目中创建类StartOrEnd，在主方法中创建String型变量，并判断变量的前导和后置字符串。" style="zoom:150%;" />

<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424002849915.png" alt="运行结果"></p>
<h3 id="判断字符串是否相等"><a href="#判断字符串是否相等" class="headerlink" title="判断字符串是否相等"></a>判断字符串是否相等</h3><p>对字符串对象进行比较不能简单地使用比较运算符“&#x3D;&#x3D;”，因为比较运算符比较的是两个字符串的地址是否相同。即使两个字符串的内容相同，两个对象的内存地址也是不同的，使用比较运算符仍然会返回 false。</p>
<p>使用比较运算符比较两个字符串，实例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">tom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;I am a student&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">jerry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;I am a student&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> (tom == jerry);</span><br></pre></td></tr></table></figure>

<p>此时，布尔型变量b的值为false，因为字符串是对象，tom、jerry是引用。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424003004819.png" alt="image-20220424003004819"></p>
<p>因此，要比较两个字符串内容是否相等，应使用equals()方法和</p>
<p>equalsIgnoreCase()方法。</p>
<h4 id="（1）-equals-方法"><a href="#（1）-equals-方法" class="headerlink" title="（1） equals()方法"></a>（1） equals()方法</h4><p>如果两个字符串具有相同的字符和长度，则使用equals()方法进行比较时，返回true。</p>
<p>语法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str.equals(String otherstr)</span><br></pre></td></tr></table></figure>

<p>其中，str、otherstr是要比较的两个字符串对象。</p>
<h4 id="（2）-equalsIgnoreCase-方法"><a href="#（2）-equalsIgnoreCase-方法" class="headerlink" title="（2） equalsIgnoreCase()方法"></a>（2） equalsIgnoreCase()方法</h4><p>使用equals()方法对字符串进行比较时是区分大小写的，而使用equalsIgnoreCase()方法是在忽略了大小写的情况下比较两个字符串是否相等，返回结果仍为boolean类型。</p>
<p>语法如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.equalsIgnoreCase(String otherstr)</span><br></pre></td></tr></table></figure>

<p>其中，str、otherstr是要比较的两个字符串对象。</p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220424003252863.png" alt="在项目中创建类Opinion，在主方法中创建String型变量，实现判断两个字符串是否相等，并将结果输出。" style="zoom:150%;" />

<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424003419680.png" alt="运行结果"></p>
<h3 id="按字典顺序比较两个字符串"><a href="#按字典顺序比较两个字符串" class="headerlink" title="按字典顺序比较两个字符串"></a>按字典顺序比较两个字符串</h3><p>compareTo()方法为按字典顺序比较两个字符串，该比较基于字符串中各个字符的Unicode值，按字典顺序将此String对象表示的字符序列与参数字符串所表示的字符序列进行比较。</p>
<p>如果按字典顺序此String对象位于参数字符串之前，则比较结果为一个负整数；如果按字典顺序此String对象位于参数字符串之后，则比较结果为一个正整数；如果这两个字符串相等，则结果为0。</p>
<p>语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.compareTo(String otherstr)</span><br></pre></td></tr></table></figure>

<p>其中，str、otherstr是要比较的两个字符串对象。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424020644862.png" alt="在项目中创建类Wordbook，在主方法中创建String变量，使用compareTo()方法将字符变量进行比较，并将比较结果输出。"></p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220424020708809.png" alt="运行结果" style="zoom:50%;" />



<p>compareTo() 方法用于将 Number 对象与方法的参数进行比较。可用于比较 Byte, Long, Integer等。</p>
<p>该方法用于两个相同数据类型的比较，两个不同类型的数据不能用此方法来比较。</p>
<h5 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h5><p><strong>referenceName</strong> – 可以是一个 Byte, Double, Integer, Float, Long 或 Short 类型的参数。</p>
<h5 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h5><ul>
<li>如果指定的数与参数相等返回 0。</li>
<li>如果指定的数小于参数返回 -1。</li>
<li>如果指定的数大于参数返回 1。</li>
</ul>
<h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">	<span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">	System.out.println(x.compareTo(<span class="number">3</span>));</span><br><span class="line">	System.out.println(x.compareTo(<span class="number">5</span>));</span><br><span class="line">	System.out.println(x.compareTo(<span class="number">8</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译以上程序，输出结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">-1</span><br></pre></td></tr></table></figure>

<h3 id="字母大小写转换"><a href="#字母大小写转换" class="headerlink" title="字母大小写转换"></a>字母大小写转换</h3><p>字符串的toLowerCase()方法可将字符串中的所有字符从大写字母改写为小写字母，而toUpperCase()方法可将字符串中的小写字母改写为大写字母。</p>
<h4 id="（1）-toLowerCase-方法"><a href="#（1）-toLowerCase-方法" class="headerlink" title="（1） toLowerCase()方法"></a>（1） toLowerCase()方法</h4><p>该方法将String转换为小写。如果字符串中没有应该被转换的字符，则将原字符串返回；否则将返回一个新的字符串，将原字符串中每个该进行小写转换的字符都转换成等价的小写字符。字符长度与原字符长度相同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.toLowerCase()</span><br></pre></td></tr></table></figure>

<p>其中，str是要进行转换的字符串。</p>
<h5 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h5><p>转换为小写的字符串。</p>
<h5 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">Str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;WWW.I-NMB.COM&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;返回值 :&quot;</span> );</span><br><span class="line">        System.out.println( Str.toLowerCase() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上程序执行结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回值 :www.i-nmb.com</span><br></pre></td></tr></table></figure>

<h4 id="（2）-toUpperCase-方法"><a href="#（2）-toUpperCase-方法" class="headerlink" title="（2） toUpperCase()方法"></a>（2） toUpperCase()方法</h4><p>该方法将String转换为大写。如果字符串中没有应该被转换的字符，则将原字符串返回；否则返回一个新字符串，将原字符串中每个该进行大写转换的字符都转换成等价的大写字符。新字符长度与原字符长度相同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.toUpperCase()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用toLowerCase()方法和toUpperCase()方法进行大小写转换时， 数字或非字符不受影响</p>
</blockquote>
<h5 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h5><p>字符转换为大写后的字符串。</p>
<h5 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">Str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;www.i-nmb.com&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;返回值 :&quot;</span> );</span><br><span class="line">        System.out.println( Str.toUpperCase() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上程序执行结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回值 :WWW.I-NMB.COM</span><br></pre></td></tr></table></figure>



<h3 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h3><p>使用split()方法可以使字符串按指定的分割字符或字符串对内容进行分割，并将分割后的结果存放在字符串数组中。split()方法提供了以下两种字符串分割形式。</p>
<h4 id="（1）-split-String-sign"><a href="#（1）-split-String-sign" class="headerlink" title="（1） split(String sign)"></a>（1） split(String sign)</h4><p>该方法可根据给定的分割符对字符串进行拆分。</p>
<h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str.split(String sign)</span><br></pre></td></tr></table></figure>

<p>sign为分割字符串的分割符，也可以使用正则表达式</p>
<blockquote>
<p>没有统一的对字符进行分割的符号。如果想定义多个分割符，可使用符号“|”。例如，“,|&#x3D;”表示分割符分别为“,”和“&#x3D;”。</p>
</blockquote>
<h5 id="（2）-split-String-sign-int-limit"><a href="#（2）-split-String-sign-int-limit" class="headerlink" title="（2） split(String sign,int limit)"></a>（2） split(String sign,int limit)</h5><p>该方法可根据给定的分割符对字符串进行拆分，并限定拆分的次数。</p>
<h5 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.split(String sign,<span class="type">int</span> limit)</span><br></pre></td></tr></table></figure>

<p>sign：分割字符串的分割符，也可以使用正则表达式</p>
<p>limit：限制的分割次数</p>
<h5 id="例-1"><a href="#例-1" class="headerlink" title="例 1"></a>例 1</h5><p>使用 split() 方法对字符串进行分割的实例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line">    String Colors=<span class="string">&quot;Red,Black,White,Yellow,Blue&quot;</span>;</span><br><span class="line">    String[] arr1=Colors.split(<span class="string">&quot;,&quot;</span>);    <span class="comment">//不限制元素个数</span></span><br><span class="line">    String[] arr2=Colors.split(<span class="string">&quot;,&quot;</span>,<span class="number">3</span>);    <span class="comment">//限制元素个数为3</span></span><br><span class="line">    System.out.println(<span class="string">&quot;所有颜色为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr1.length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(arr1[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;前三个颜色为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;arr2.length;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(arr2[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">所有颜色为：</span><br><span class="line">Red</span><br><span class="line">Black</span><br><span class="line">White</span><br><span class="line">Yellow</span><br><span class="line">Blue</span><br><span class="line">前三个颜色为：</span><br><span class="line">Red</span><br><span class="line">Black</span><br><span class="line">White,Yellow,Blue</span><br></pre></td></tr></table></figure>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><p>String类的静态format()方法用于创建格式化的字符串。format()方法有两种重载形式。</p>
<h4 id="（1）-format-String-format-Object…args"><a href="#（1）-format-String-format-Object…args" class="headerlink" title="（1） format(String format,Object…args)"></a>（1） format(String format,Object…args)</h4><p>该方法使用指定的格式字符串和参数返回一个格式化字符串，格式化后的新字符串使用本地默认的语言环境。</p>
<h5 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.format(String format,Object…args)</span><br></pre></td></tr></table></figure>

<p>format：格式字符串</p>
<p>args：格式字符串中由格式说明符引用的参数。如果还有格式说明符以外的参数，则忽略这些额外的参数。此参数的数目是可变的，可以为0</p>
<h4 id="（2）-format-Local-l-String-format-Object…args"><a href="#（2）-format-Local-l-String-format-Object…args" class="headerlink" title="（2） format(Local l,String format,Object…args)"></a>（2） format(Local l,String format,Object…args)</h4><p>l ：格式化过程中要应用的语言环境。如果l为null，则不进行本地化。</p>
<h3 id="日期和时间字符串格式化"><a href="#日期和时间字符串格式化" class="headerlink" title="日期和时间字符串格式化"></a>日期和时间字符串格式化</h3><p>在应用程序设计中，经常需要显示时间和日期。如果想输出满意的日期和时间格式，一般需要编写大量的代码经过各种算法才能实现。format()方法通过给定的特殊转换符作为参数来实现对日期和时间的格式化。</p>
<h4 id="1-日期格式化"><a href="#1-日期格式化" class="headerlink" title="1. 日期格式化"></a><strong>1.</strong> 日期格式化</h4><img data-src="https://img.i-nmb.cn/inmb/image-20220424022909309.png" alt="返回一个月中的天数，实例代码" style="zoom:150%;" />

<p>上述代码中变量s的值是当前日期中的天数，如今天是15号，则s的值为15；%te是转换符。常用的日期格式化转换符如表</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424023144063.png" alt="常用的日期格式化转换符"></p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424023226684.png" alt="在项目中创建类Eval，实现将当前日期信息以4位年份、月份全称、2位日期形式输出"></p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424023241895.png" alt="结果"></p>
<h4 id="2-时间格式化"><a href="#2-时间格式化" class="headerlink" title="2. 时间格式化"></a><strong>2.</strong> 时间格式化</h4><p>使用format()方法不仅可以完成日期的格式化，也可以实现时间的格式化。时间格式化转换符要比日期转换符更多、更精确，它可以将时间格式化为时、分、秒、毫秒。</p>
<h3 id="常规类型格式化"><a href="#常规类型格式化" class="headerlink" title="常规类型格式化"></a>常规类型格式化</h3><p>常规类型的格式化可应用于任何参数类型，可通过如表5.4所示的转换符来实现。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424023415012.png" alt="常规转换符"></p>
<img data-src="https://img.i-nmb.cn/inmb/image-20220424023503409.png" alt="在项目中创建类General，在主方法中实现不同数据类型到字符串的转换。" style="zoom:150%;" />

<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424023521017.png" alt="运行结果"></p>
<h2 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h2><p>正则表达式通常被用于判断语句中，用来检查某一字符串是否满足某一格式。正则表达式是含有一些具有特殊意义字符的字符串，这些特殊字符称为正则表达式的元字符。例如，“\d”表示数字0~9中的任何一个，“\d”就是元字符。</p>
<p><img data-src="https://img.i-nmb.cn/inmb/image-20220424023743825.png" alt="正则表达式中的元字符"></p>
]]></content>
      <tags>
        <tag>Eclipse</tag>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
